---
title: Introducci√≥n a PyMarc
objectives:
- ¬øQu√© es MARC?
- ¬øD√≥nde encontrar recursos √∫tiles sobre MARC?
- Comprender la estructura b√°sica de un archivo MARC en PyMARC
keypoints:
- Sabemos d√≥nde encontrar recursos que describen los registros y campos MARC
- Sabemos c√≥mo identificar las partes que componen un registro y un campo MARC

---

- Download marc files
- Enlace al google colab (python Basics, PyMarc Basics)


## ¬øQu√© es MARC?

**MARC** es el acr√≥nimo de **MA**chine-**R**eadable **C**ataloging (Catalogaci√≥n legible por m√°quina). Define un formato de datos que surgi√≥ de una iniciativa liderada por la Biblioteca del Congreso de EE.UU. hace casi cuarenta a√±os.  

Este formato proporciona un mecanismo para que los ordenadores puedan intercambiar, usar e interpretar informaci√≥n bibliogr√°fica. Los elementos de datos de MARC forman la base de la mayor√≠a de los cat√°logos de bibliotecas utilizados actualmente.

En los a√±os 80 pas√≥ a llamarse **USMARC**, y a fines de los a√±os 90 se convirti√≥ en **MARC 21**.

**Recursos √∫tiles:**
- Sitio oficial de MARC: [https://www.loc.gov/marc/](https://www.loc.gov/marc/)
- T√©rminos y definiciones MARC: [https://www.loc.gov/marc/umb/um01to06.html#part3](https://www.loc.gov/marc/umb/um01to06.html#part3)
- Formato MARC 21 para datos bibliogr√°ficos (completo y resumido): [http://www.loc.gov/marc/bibliographic/](http://www.loc.gov/marc/bibliographic/)


## ¬øQu√© es PyMarc?

PyMARC es una biblioteca de Python dise√±ada para leer, escribir y manipular registros MARC (Machine-Readable Cataloging).

Es muy √∫til para bibliotecarios, archivistas, desarrolladores y cualquier persona que necesite trabajar con cat√°logos bibliogr√°ficos en formato MARC, especialmente en contextos donde se desea automatizar tareas o integrar datos MARC en otros sistemas.

¬øQu√© hace exactamente PyMARC?
Con PyMARC puedes:

 - Leer archivos MARC (.mrc o .marc)
 - Acceder a campos y subcampos espec√≠ficos (como el t√≠tulo, autor, etc.)
 - Extraer datos y convertirlos a otros formatos (como JSON o CSV)
 - Crear nuevos registros MARC desde cero
 - Editar registros existentes
 - Guardar los cambios en archivos MARC

## ¬øPor qu√© usar PyMARC en lugar de hacerlo manualmente?

El formato MARC es complejo y binario, no es f√°cil de leer o procesar sin herramientas especializadas. PyMARC entiende esa estructura y nos da una forma clara de interactuar con ella usando c√≥digo Python sencillo.

## ¬øCu√°ndo usar PyMARC y cu√°ndo usar MarcEdit?

| Tarea o Necesidad                                                             | PyMARC üêç | MarcEdit üõ†Ô∏è |
|------------------------------------------------------------------------------|:---------:|:-----------:|
| Automatizar tareas repetitivas o por lotes                                   | ‚úÖ        | üö´          |
| Procesar registros MARC sin interfaz gr√°fica (ideal para servidores)         | ‚úÖ        | üö´          |
| Extraer campos y convertir a CSV, JSON, Excel, etc. desde c√≥digo             | ‚úÖ        | üö´          |
| Integrar con APIs, bases de datos, o herramientas como pandas                | ‚úÖ        | üö´          |
| Crear scripts reproducibles o notebooks para talleres                        | ‚úÖ        | üö´          |
| Editar visualmente registros MARC uno por uno                                | üö´        | ‚úÖ          |
| Usar sin saber programar (interfaz amigable)                                 | üö´        | ‚úÖ          |
| Validar registros MARC con reglas MARC21                                     | üö´        | ‚úÖ          |
| Convertir entre MARC, MARCXML, MODS, Dublin Core                             | ‚úÖ (Solo JSON y MARCXML)      | ‚úÖ          |
| Cargar datos desde hojas de c√°lculo y exportarlos como MARC                  | ‚úÖ        | ‚úÖ          |
| Trabajar con autoridades (VIAF, Library of Congress, etc.)                   | üö´        | ‚úÖ          |
| Previsualizar y editar campos de forma masiva con herramientas visuales      | üö´        | ‚úÖ          |

> üêç Usa **PyMARC** si necesitas automatizar, integrar con otras plataformas y transformar de MARC a otro esquema de metadatos.
> üõ†Ô∏è Usa **MarcEdit** si prefieres trabajar visualmente, sin programar, o para tareas de catalogaci√≥n r√°pida.

**Un ejemplo concreto:**

Quieres extraer todos los t√≠tulos y n√∫meros de control de 10,000 registros MARC y guardarlos en un CSV.

- Con MarcEdit: abrir archivo > convertir a MARC-XML > extraer campos con una herramienta > guardar CSV (todo manual).

- Con PyMARC: un peque√±o script de 10 l√≠neas hace todo eso autom√°ticamente.

**¬øY qu√© no puede hacer PyMARC tan f√°cilmente?**

Justo al rev√©s, MarcEdit:

- Tiene una interfaz visual amigable (no necesitas saber c√≥digo).

- Permite hacer validaciones y conversiones MARC <-> MARCXML f√°cilmente.

- Es excelente para tareas peque√±as o puntuales.


## Leer archivos MARC con PyMARC

Para leer archivos MARC, analicemos el siguiente script: 

```{python}

# Importamos la biblioteca pymarc, que nos ayuda a leer archivos MARC
import pymarc

# Definimos el nombre del archivo MARC que vamos a leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo binario ('rb' significa 'read binary')
with open(my_marc_file, 'rb') as data:
    
    # Creamos un lector de registros MARC a partir del archivo abierto
    reader = pymarc.MARCReader(data)
    
    # Recorremos cada registro en el archivo MARC
    for record in reader:
        
        # Imprimimos el t√≠tulo del registro (extra√≠do del campo 245)
        print(record)
        # Detener despu√©s del primer registro (para ejemplo)
        break
```


Este peque√±o script hace lo siguiente:

- Importa la biblioteca pymarc, que nos permite trabajar con registros MARC en Python.

- Define el nombre del archivo que contiene nuestros registros MARC de ejemplo.

- Abre el archivo en modo binario ('rb') porque los archivos MARC no son archivos de texto comunes.

- Usa MARCReader para leer el contenido del archivo y lo recorre registro por registro.

## Comprendiendo los campos MARC en PyMARC

Es √∫til entender la estructura de los objetos de datos que estamos viendo cuando leemos un registro MARC, y c√≥mo se relacionan con el formato MARC tradicional que se utiliza en bibliotecas.

**¬øQu√© estamos viendo?**

Observa que la primera l√≠nea de un registro MARC en formato legible por humanos comienza con un signo de igual (=). Por ejemplo, la primera l√≠nea podr√≠a ser:

```bash
=LDR  00912cam a2200301 a 4500
```

- El signo igual `=` indica que se trata de una etiqueta de campo o tag.

- Los siguientes tres caracteres (LDR) nos dicen qu√© campo es.

- En este caso, LDR significa leader o l√≠der, una secci√≥n especial que contiene informaci√≥n codificada sobre el registro completo (como su tipo, estatus, etc.).

- Todos los dem√°s campos MARC usan etiquetas num√©ricas de tres d√≠gitos, por ejemplo:

```bash
=245  10$aLarger than life :$bthe story of Eric Baume /$cby Arthur Manning.
```

- Aqu√≠ 245 es el n√∫mero de campo.

- Los dos d√≠gitos que siguen (10) son los indicadores, que modifican el significado del campo.

- Lo que sigue son los subcampos, precedidos por el s√≠mbolo $. En el ejemplo anterior serian los subcambos $a, $b y $c .

Dedica un momento a revisar las especificaciones MARC para este campo y comp√°ralas con los datos que tenemos en este registro.

http://www.loc.gov/marc/bibliographic/bd245.html


## ¬øQu√© tipos de campos hay?

En MARC, los campos se dividen en dos categor√≠as principales:

| Tipo de campo        | Rango de etiquetas | Caracter√≠sticas principales |
|----------------------|--------------------|------------------------------|
| **Campos de control** | 001‚Äì009            | No tienen indicadores ni subcampos. Contienen informaci√≥n fija. |
| **Campos de datos**   | 010 en adelante     | Incluyen indicadores y subcampos, m√°s complejos y ricos en contenido. |

[Gu√≠a de campos de control en MARC](http://www.loc.gov/marc/bibliographic/bd00x.html)


## Accesando los campos de un archivo MARC

```{python}

from pymarc import MARCReader  # Importamos la clase MARCReader desde la biblioteca pymarc

# Definimos el nombre del archivo MARC que queremos leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo lectura binaria ('rb')
with open(my_marc_file, 'rb') as data:
    # Creamos un lector MARC que puede recorrer los registros en el archivo
    reader = MARCReader(data)
    
    # Iteramos sobre cada registro del archivo
    for record in reader:
        # Imprimimos el contenido completo del registro en formato legible
        print(record)
        # Detener despu√©s del primer registro (para ejemplo)
        quit()

```

**¬øQu√© estamos haciendo aqu√≠?**
`record` es un objeto creado por PyMARC que representa un solo registro MARC.

Podemos utilizar este objeto para acceder solamente a los campos que nos interesan.

Para hacer esto, le decimos a Python cu√°l es el nombre o la etiqueta del campo MARC que queremos extraer.


```{python}
#| error: true
from pymarc import MARCReader
from sys import stderr
# Definimos el nombre del archivo MARC que queremos leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo lectura binaria ('rb')
with open(my_marc_file, 'rb') as data:
    # Creamos un lector MARC que puede recorrer los registros en el archivo
    reader = MARCReader(data)
    
    # Iteramos sobre cada registro del archivo
    for record in reader:
        # Imprimimos el contenido completo del registro en formato legible
        print(record['245'])
        # Detener despu√©s del primer registro (para ejemplo)
        break
```

En esta l√≠nea de c√≥digo `print(record)['245']` le estamos pidiendo a PyMARC que:

- Busque dentro del objeto record un campo cuya etiqueta sea 245 (que corresponde a la declaraci√≥n de t√≠tulo del recurso).

- Si lo encuentra, lo imprime.

Este m√©todo es muy √∫til cuando trabajamos con muchos campos pero solo necesitamos unos espec√≠ficos, como el t√≠tulo (245), el autor (100), o materias (650).


### Comprendiendo los tipos de datos y objetos en Python

El objeto `record` que crea PyMARC **parece** comportarse como un diccionario de Python (`dict`).  
Y se accede a sus campos usando la sintaxis de corchetes, como:

`record['245']`

Sin embargo, si le preguntamos directamente a Python qu√© tipo de objeto es usando la funci√≥n type(), obtenemos algo m√°s espec√≠fico:

`<class 'pymarc.record.Record'>`

Esto nos dice que record es una instancia de una clase llamada Record, definida por la biblioteca pymarc.

**¬øPor qu√© es importante saber esto?**

En Python, cada objeto pertenece a un tipo de dato.

Saber qu√© tipo de dato estamos usando nos ayuda a:

- Acceder correctamente a sus partes internas (como campos o m√©todos).

- Prevenir errores.

- Usar las funciones adecuadas con cada tipo de dato.

La sintaxis con corchetes (record['245']) es una pista visual que recuerda a un diccionario (dict), donde una clave devuelve un valor:

```python
mi_diccionario = {'clave': 'valor'}
print(mi_diccionario['clave'])  # Imprime: valor
```

Aunque `record` no es exactamente un diccionario, se comporta de manera similar en muchos aspectos, porque la clase `Record` fue dise√±ada para imitar ese comportamiento.

**Recursos para seguir aprendiendo**

No vamos a profundizar en esta lecci√≥n en c√≥mo funcionan las clases o los diccionarios, pero si te interesa, hay muchos recursos gratuitos donde puedes aprender m√°s. [Tutoriales de Python](https://www.w3schools.com/python/default.asp)

**Comparaci√≥n visual: Diccionario Python vs Objeto `record` de PyMARC**

| Concepto              | Diccionario en Python üß∫ | Objeto `record` en PyMARC üìö |
|------------------------|--------------------------|-------------------------------|
| **Tipo de dato**      | `dict`                   | `pymarc.record.Record`        |
| **Creaci√≥n**          | `mi_dic = {'245': 'T√≠tulo'}` | `record = MARCReader(data)` |
| **Acceso a datos**    | `mi_dic['245']`          | `record['245']`               |
| **Qu√© devuelve**      | El valor asociado a la clave | El campo MARC completo (con subcampos e indicadores) |
| **Pistas visuales**   | Uso de corchetes `[]`    | Tambi√©n usa corchetes `[]`    |
| **M√©todos √∫tiles**    | `.keys()`, `.values()`   | `.get_fields()`, `.title()`   |
| **Es realmente un diccionario?** | ‚úÖ S√≠            | ‚ùå No, pero se comporta similar |
| **M√°s informaci√≥n**   | [docs.python.org](https://docs.python.org/3/tutorial/datastructures.html#dictionaries) | [PyMARC docs](https://pymarc.readthedocs.io/) |

**¬øPor qu√© importa esto?**

Saber c√≥mo acceder a la informaci√≥n dentro de un objeto es clave para trabajar con MARC en Python.  
Aunque `record` no sea t√©cnicamente un diccionario, **PyMARC lo dise√±√≥ para que se sienta como uno**, facilitando su uso para principiantes.


### C√≥mo extraer m√∫ltiples campos en PyMARC

Si queremos **extraer varios campos MARC espec√≠ficos** (por ejemplo, autor, t√≠tulo, descripci√≥n f√≠sica, autor adicional), podemos usar un bucle y acceder a cada uno individualmente dentro del registro.

```{python}
from pymarc import MARCReader

# Definimos el nombre del archivo MARC que queremos leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo lectura binaria ('rb')
with open(my_marc_file, 'rb') as data:
    reader = MARCReader(data)
    
    # Iteramos sobre cada registro
    for record in reader:
        # Extraemos e imprimimos varios campos MARC
        try:
            print(record.leader)
            print(record['100'])  # Autor principal
            print(record['245'])  # T√≠tulo
            print(record['300'])  # Descripci√≥n f√≠sica
            print(record['700'])  # Autor adicional (si lo hay)
        except KeyError as error:
            print(f"{record.leader} -> {type(error)}")
            continue
        # Detener despu√©s del primer registro (para ejemplo)
        break
```

**Nota:**
Cada l√≠nea print(record['XXX']) intenta acceder a un campo espec√≠fico por su etiqueta MARC.

Si el campo no existe en ese registro, PyMARC levantar√° un error de tipo `KeyError`.

Alternativamente, puedes usar la funci√≥n `.get_fields()` para obtener varios campos en un objecto iterable sin levantar ning√∫n error:

```{python}
from pymarc import MARCReader

# Definimos el nombre del archivo MARC que queremos leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo lectura binaria ('rb')
with open(my_marc_file, 'rb') as data:
    reader = MARCReader(data)
    
    # Iteramos sobre cada registro
    for record in reader:
        campos = record.get_fields('100','245', '300', '700')
        for campo in campos:
            print(campo)
        # Detener despu√©s del primer registro (para ejemplo)
        break
```


Esto es √∫til cuando quieres recorrer din√°micamente los campos encontrados en el registro.


::: {.callout-caution title="Ejercicio" collapse="true" }

Descarga el archivo MARC presentado en esta unidad. Intenta: 
- Leerlo
- Pedir multiples campos

Imprime cada una utilizando la funci√≥n `print`.

:::


## Acceder a subcampos MARC espec√≠ficos con PyMARC

Podemos usar el mismo m√©todo de "clave" (`key`) para acceder a los **subcampos** dentro de un campo MARC espec√≠fico.

**Ejemplo:**

```{python}
#| error: true
from pymarc import MARCReader

# Definimos el nombre del archivo MARC que queremos leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo lectura binaria ('rb')
with open(my_marc_file, 'rb') as data:
    reader = MARCReader(data)
    
    # Iteramos sobre cada registro
    try:
        for record in reader:
            # Extraemos e imprimimos varios campos MARC
            print("Subcampo 'a':", record['245']['a'])
            print("Subcampo 'b':", record['245']['b'])
            print("Subcampo 'c':", record['245']['c'])
            # Detener despu√©s del primer registro (para ejemplo)
            break
    except KeyError as error:
        print(error)
        # raise error
        pass
```

**¬øQu√© est√° ocurriendo aqu√≠?**

En cada l√≠nea del bloque `print(...)` le estamos pidiendo a Python que haga lo siguiente:

- Busque dentro del objeto llamado record.
- Localice el campo que tiene la etiqueta '245' (es decir, el campo de t√≠tulo en MARC).
- Dentro de ese campo, acceda al subcampo que tenga la letra `a`, `b` o `c`.

Observa que cada campo de un registro se comporta como un diccionario de subcampos.

Este m√©todo funciona solo si el campo y los subcampos existen.
Si alg√∫n subcampo est√° ausente en un registro, obtendr√°s un error del tipo `KeyError`.

**NOTA:** El c√≥digo anterior fracasa cuando trata de obtener el subcampo `b` que no est√° presente en el campo `245` del registro.

Para evitar eso, puedes usar el m√©todo `.get_subfields`, una forma m√°s segura de accesso:

```{python}

from pymarc import MARCReader

# Definimos el nombre del archivo MARC que queremos leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo lectura binaria ('rb')
with open(my_marc_file, 'rb') as data:
    reader = MARCReader(data)
    
    # Iteramos sobre cada registro
    for record in reader:
        titulo = record['245']
        if titulo:
            print("Subcampo 'a':", titulo.get_subfields('a'))
            print("Subcampo 'b':", titulo.get_subfields('b'))
            print("Subcampo 'c':", titulo.get_subfields('c'))
        # Detener despu√©s del primer registro (para ejemplo)
        break
```

Esto devuelve listas con los subcampos encontrados (o listas vac√≠as si no existen).

## M√©todos √∫tiles en PyMARC para acceder a campos MARC

El objeto de tipo `record` que PyMARC crea ofrece varios m√©todos √∫tiles para acceder a los datos.

Uno de ellos es `.value()`, que **devuelve el contenido completo del campo como texto plano**, sin subcampos (`$`) ni indicadores.

PyMARC incluye m√©todos ‚Äúaccesibles‚Äù como `.title()`, que devuelve el contenido del campo 245 ya procesado como un t√≠tulo legible para humanos.


**M√©todos comunes de PyMARC explicados**

| M√©todo                         | Se usa con...          | ¬øQu√© hace?                                                                 | Tipo de dato que devuelve        | Ejemplo                                  |
|-------------------------------|------------------------|----------------------------------------------------------------------------|----------------------------------|------------------------------------------|
| `record['245']`               | `record`               | Accede a un campo MARC espec√≠fico por etiqueta                            | `Field`                          | `record['245']`                          |
| `record['245']['a']`          | `Field`                | Devuelve el contenido del subcampo `'a'` del campo                        | `str` (texto)                    | `record['245']['a']`                     |
| `record.get_fields('245')`    | `record`               | Devuelve una lista de todos los campos con esa etiqueta                   | `list` de `Field`                | `record.get_fields('245')`              |
| `field.value()`               | `Field`                | Devuelve todo el contenido del campo como texto plano                     | `str`                            | `record['245'].value()`                 |
| `field.get_subfields('a')`    | `Field`                | Devuelve una lista de todos los subcampos con esa etiqueta                | `list` de `str`                  | `record['245'].get_subfields('a')`      |
| `record.title()`              | `record`               | Devuelve el t√≠tulo procesado como texto legible (usa campo 245)          | `str`                            | `record.title()`                        |
| `record['001'].value()`       | `record`               | Devuelve el n√∫mero de control del registro (campo 001) como texto         | `str`                            | `record['001'].value()`                 |
| `type(objeto)`                | Cualquier objeto       | Muestra el tipo de dato del objeto                                        | `type`                           | `type(record['245'])`                   |

Puedes combinar varios m√©todos, por ejemplo:

 ```{python}

from  pymarc import MARCReader

# Definimos el nombre del archivo MARC que queremos leer
my_marc_file = "data/edited_69x_subject.mrc"

# Abrimos el archivo en modo lectura binaria ('rb')
with  open(my_marc_file, 'rb') as data:
    reader = MARCReader(data)

    # Iteramos sobre cada registro
    for record in reader:
        # Exploramos el tipo de objeto 'record' y su campo 245
        print("Tipo del objeto completo:")
        print(type(record))
        print()

        print("Campo 245 crudo:")
        print(record['245'])
        print("Tipo del campo 245:")
        print(type(record['245']))
        print()

        print("Campo 245 como texto (value):")
        print(record['245'].value())
        print("Tipo del texto:")
        print(type(record['245'].value()))
        print()

        print("Subcampo 'a' del campo 245:")
        print(record['245']['a'])
        print("Tipo del subcampo 'a':")
        print(type(record['245']['a']))
        print()

        print("M√©todo record.title():")
        print(record.title)
        print("Tipo del resultado de record.title():")
        print(type(record.title))
        print()

        # Mostramos todos los campos 650 y 651 (materias)
        print("Campos de materias (650 y 651):")
        materias = record.get_fields('650', '651')
        for campo in materias:
            print(campo)
        print()

        # Subcampos 'a' y 'b' del campo 245
        titulo = record['245']
        if titulo:
            print("Subcampos 'a' y 'b' del campo 245:")
            subcampos = titulo.get_subfields('a', 'b')
            for sub in subcampos:
                print(sub)
        # Detener despu√©s del primer registro (para ejemplo)
        break

 ```

**¬øQu√© incluye este script?**

- An√°lisis del campo 245 con distintos m√©todos (['a'], .value(), .title())

- Acceso seguro a subcampos

- Extracci√≥n de materias geogr√°ficas y tem√°ticas (650, 651)

- Uso de type() para mostrar los tipos de datos

