```{python}
from pymarc import MARCReader, Record, Field, Subfield
from typing import List
import pandas as pd
import json

def load_txt_file(TXT_FILE):
    """_summary_
        reads a txt file
    Args:
        TXT_FILE: txt file containing bib ids

    Returns:
        LIST: # Returns a list of list. [[bibid]]
    """
    with open(TXT_FILE) as file:
        txtdata = file.readlines()
        data=[]
        for bibid in txtdata:
            data.append(bibid.strip())
    return data

def load_mrc_file(MRC_FILE)->List[Record]: 
    """_summary_
        uses MARCReader to read a .mrc file
    Args:
        MRC_FILE (str): .mrc file generated by Vogager containing 
        full bibiographic and holdings records

    Returns:
        List[pymarc.record.Record]: _description_
    """
    reader = MARCReader(open(MRC_FILE, 'rb'), force_utf8="True")
    output=[]
    for record in reader:
        output.append(record)
    return output
   
def get_record_from_data(bib_id:str, mrc_data:List[Record])->Record:
    """_summary_
         with a bib_id, identify and extract records fields matching bib_id in the mrc_list.
         hold_id can be used with this function
    Args:
        bib_id (str): str of a bib id
        mrc_data (List[Record]): marc record extracted using the function load_mrc_file

    Returns:
        Record: Returns a pymarc.Record (with fields) of a given bib or hold id
    """
    for record in mrc_data:
        for field in record.get_fields("001"):
            if bib_id == field.value():
                return record

def get_record_from_data_ldr(record_ldr:str, mrc_data:List[Record])->Record:
    """_summary_
         with a bib_id, identify and extract records fields matching bib_id in the mrc_list.
         hold_id can be used with this function
    Args:
        record_ldr (str): str of a record leader
        mrc_data (List[Record]): marc record extracted using the function load_mrc_file

    Returns:
        Record: Returns a pymarc.Record (with fields) of a given bib or hold id
    """
    for record in mrc_data:
        if record.leader == record_ldr:
                return record

def get_mhfd_records(bib_id:str,mrc_data:List[Record])->List[Record]:
    """_summary_

    Args:
        bib_id (str): _description_
        mrc_data (List[Record]): _description_

    Returns:
        List[Record]: _description_
    """
    output_list = []
    for record in mrc_data:
        for field in record.get_fields("004"):
            if bib_id == field.value():
                output_list.append(record)
    return output_list
            

### EXECUTING FUNCTIONS

TXT_FILE= "/Users/if224/Documents/irma_repos/exhibition_islamic_bein/bib_ids_islamic_exibit.txt"  
txt_data= load_txt_file(TXT_FILE)
MRC_FILE= "/Users/if224/Documents/irma_repos/exhibition_islamic_bein/islamic_exhibition_2024.mrc"
mrc_data= load_mrc_file(MRC_FILE)

record= []
islamic_exhibition = {}
islamic_exhibition_bib = {}
islamic_exhibition_hold = {}
report = "/Users/if224/Documents/irma_repos/exhibition_islamic_bein/islamic_exhibition.csv"
hold_id_list = []
desired_fields=["001","004","100","240","245","260","264","300","700","500","561","852","880"]

for bibid in txt_data:
    # Set values & desired fields
    record_bib = get_record_from_data(bibid,mrc_data)
    records_hold = get_mhfd_records(bibid,mrc_data)
    output_fields={}

    # Get bib record data
    for field in record_bib:
        if field.tag in desired_fields:
        
            if field.tag not in output_fields.keys():
                output_fields.update({str(field.tag): [] })
            output_fields[field.tag].append(str(field.value()))
    assert bibid not in islamic_exhibition_bib.keys(), f"Duplicate bib_ldr({bibid}): \nPRESENT({islamic_exhibition_bib[bibid]}) \nNEW({output_fields})"
    islamic_exhibition_bib.update({bibid: output_fields})
    islamic_exhibition_rows = []
    # Get hold record data
    for record in records_hold:
        hold_id = record.get_fields('001')[0].value()
        hold_id_list.append(hold_id)
        output_fields = {}
        for field in record:
            if field.tag in desired_fields:
                if field.tag not in output_fields.keys():
                    output_fields.update({str(field.tag): [] })
                output_fields[field.tag].append(str(field.value()))
        assert hold_id not in islamic_exhibition_hold.keys(), f"Duplicate hold_ldr({hold_id}): \nPRESENT({islamic_exhibition_hold[hold_id]}) \nNEW({output_fields})"
        islamic_exhibition_hold.update({hold_id: output_fields})

# Group hold id data with bib id data
header_row = tuple(
    [
        tag+"_bib" for tag in desired_fields
    ] + [
        tag+"_hold" for tag in desired_fields
    ]
)


for hold_id in hold_id_list:
    try:
        hold_data = islamic_exhibition_hold.get(hold_id)
        bib_id = hold_data.get("004")[0]
        bib_data = islamic_exhibition_bib.get(bib_id)
        bib_list_data = [
            ",".join(bib_data[tag]) if tag in bib_data.keys() else "" for tag in desired_fields 
        ]

        hold_list_data = [ 
            ",".join(hold_data[tag])if tag in hold_data.keys() else "" for tag in desired_fields 
        ]
        row = tuple(bib_list_data + hold_list_data)
        # print(row)
        islamic_exhibition_rows.append(row)
    except KeyError as err:
        print(hold_id, err)
        print(hold_data)
        raise err
        

# Create JSON
# with open("islamic_exhibition.json", "w") as fh:
#     json.dump(islamic_exhibition,fh, indent=2)


# Create report csv
df = pd.DataFrame(islamic_exhibition_rows, columns=header_row)
print(df)
print(df.info())
df.to_csv(report,index=False)


```