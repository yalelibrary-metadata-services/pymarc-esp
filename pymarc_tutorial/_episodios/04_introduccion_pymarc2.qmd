---
title: Parseo con PyMARC
objectives:
- Buscar campos específicos con PyMARC  
- Buscar datos específicos con PyMARC  
keypoints:
- Podemos buscar información específica en un conjunto de registros MARC.  
- Entendemos cómo explorar campos, indicadores y subcampos en cualquier registro MARC. 

---

- Download marc files
- Enlace al google colab (python Basics, PyMarc Basics)

## Búsqueda de campos específicos con PyMARC

Vamos a seguir explorando cómo realizar búsquedas.

**¿Qué pasa si queremos encontrar cualquier registro que contenga la cadena "SELECCIONAR PATRON"?**  
¿Cómo podríamos adaptar nuestro código?

```{python}

# Importamos la biblioteca pymarc, que nos ayuda a leer archivos MARC
import pymarc

# Definimos el nombre del archivo MARC que vamos a leer
my_marc_file = "SELECCIONAR ARCHIVO"

# Abrimos el archivo en modo binario ('rb' significa 'read binary')
with open(my_marc_file, 'rb') as data:
    
    # Creamos un lector de registros MARC a partir del archivo abierto
    reader = pymarc.MARCReader(data)
    
    # Recorremos cada registro en el archivo MARC
    for record in reader:
        if "New Zealand" in str(record):
            print(record)
        # Detener después del primer registro (para ejemplo)
        quit()
  
```

Esto podría devolver una gran cantidad de datos si no tenemos cuidado. Pensemos en cómo podríamos formular mejor esta pregunta para refinar los resultados.

Si en lugar de imprimir todo el registro, queremos ver sólo los campos MARC que contienen la cadena buscada, podemos añadir otro bucle.  

Además, podríamos querer mostrar el identificador del registro junto con el campo coincidente:

```{python}
# Importamos la biblioteca pymarc, que nos ayuda a leer archivos MARC
import pymarc

# Definimos el nombre del archivo MARC que vamos a leer
my_marc_file = "SELECCIONAR ARCHIVO"

# Abrimos el archivo en modo binario ('rb' significa 'read binary')
with open(my_marc_file, 'rb') as data:
    
    # Creamos un lector de registros MARC a partir del archivo abierto
    reader = pymarc.MARCReader(data)
    
    # Recorremos cada registro en el archivo MARC
    for record in reader:
        if "New Zealand" in str(record):
            for field in record:
                if "New Zealand" in field.value():
                    print(record['001'].value(), field)
                    # Detener después del primer registro (para ejemplo)
                quit()
    
```

---

## Subcampos y bucles anidados

Podemos aplicar el mismo enfoque con bucles para acceder a los **subcampos** de cualquier campo que los tenga:

```python
for record in reader:
    for field in record:
            print(field)
        for subfield in field:
            print(subfield)
```

## Métodos especiales de PyMARC

PyMARC ofrece varios **métodos abreviados** para acceder a campos y subcampos de forma elegante.

### `get_fields()`, `get_subfields()`

```{python}

# Importamos la biblioteca pymarc, que nos ayuda a leer archivos MARC
import pymarc

# Definimos el nombre del archivo MARC que vamos a leer
my_marc_file = "SELECCIONAR ARCHIVO"

# Abrimos el archivo en modo binario ('rb' significa 'read binary')
with open(my_marc_file, 'rb') as data:
    
    # Creamos un lector de registros MARC a partir del archivo abierto
    reader = pymarc.MARCReader(data)
    
    # Recorremos cada registro en el archivo MARC
    for record in reader:
        if "New Zealand" in str(record):
            my_245s = record.get_fields('245')
            for my_245 in my_245s:
                subfields = my_245.get_subfields('a', 'b', 'c', 'f', 'g', 'h', 'k', 'n', 'p', 's', '6', '8')
                for sub in subfields:
                    print(sub)
                # Detener después del primer registro (para ejemplo)
                quit()
```

Para obtener esta lista de subcampos consultamos:  
https://www.loc.gov/marc/bibliographic/concise/bd245.html


### Acceder a indicadores de un campo, .indicator1 , .indicator2

```python
for record in reader:
    print(record['245'])
    print("Indicador 1 del campo 245:", record['245'].indicator1)
    print("Indicador 2 del campo 245:", record['245'].indicator2)
    quit()
```

Podemos usar los indicadores como filtro:

```python
for record in reader:
    if record['245'].indicator2 != '0':
        print(record['245'])
        print()
```

---

## Otros métodos del objeto `record`

PyMARC ofrece accesos directos a datos comunes:

```python
record.author()
record.isbn()
record.issn()
record.issn_title()
record.leader
record.location()
record.pos
record.publisher()
record.pubyear()
record.series()
record.sudoc()
record.title()
record.uniformtitle()
record.notes()
record.subjects()
record.physicaldescription()
```

Puedes probar:

```python
for record in reader:
    print(record)
    print(record.author())
    print(record.isbn())
    print(record.issn())
    quit()
```

---

## Construyendo un parser básico

```{python}
from pymarc import MARCReader

# Abrimos el archivo MARC
with open("TU_ARCHIVO.marc", "rb") as data:
    reader = MARCReader(data)

    # Iteramos sobre los registros
    for record in reader:
        # Mostramos el ID del registro (campo 001)
        if record['001']:
            print("ID:", record['001'].value())
        else:
            print("ID: (no disponible)")

        # Recorremos todos los campos del registro
        for my_field in record:
            # Intentamos acceder a los indicadores (solo existen en campos con subcampos)
            try:
                ind_1 = my_field.indicator1 or "/"  # "/" si el indicador no está definido
                ind_2 = my_field.indicator2 or "/"
                print(f"\tTag #: {my_field.tag}  Indicador 1: {ind_1}  Indicador 2: {ind_2}")
            except AttributeError:
                # Si el campo no tiene indicadores (como los de control), solo mostramos el tag
                print(f"\tTag #: {my_field.tag} (campo de control)")

            # Recorremos los subcampos (si existen)
            if hasattr(my_field, '__iter__'):
                for key, value in my_field:
                    print(f"\t\tSubcampo ${key}: {value}")

        print("\n" + "-" * 50 + "\n")

        # Solo mostramos un registro como ejemplo
        break

```

**¿Qué hace este código?**

Esta tabla resume el propósito de cada parte del código:

| Parte del código                     | ¿Qué hace?                                                      |
|-------------------------------------|-----------------------------------------------------------------|
| `record['001'].value()`             | Muestra el ID del registro (`campo 001`)                        |
| `for my_field in record:`           | Recorre todos los campos del registro                           |
| `my_field.tag`                      | Muestra el número de campo (por ejemplo, 245, 100, etc.)        |
| `my_field.indicator1 / indicator2`  | Muestra los indicadores (si existen)                            |
| `for key, value in my_field:`       | Recorre los subcampos (como `$a`, `$b`, etc.)                   |
| `hasattr(my_field, '__iter__')`     | Verifica si el campo tiene subcampos (evita error en campos de control como `001` o `008`) |

---

**Notas importantes**

- Los **campos de control** como `001`, `005`, `008` **no tienen indicadores ni subcampos**, por eso generan un `AttributeError` si se intenta acceder a `indicator1` o `indicator2`.
- Usamos `or "/"` para mostrar un valor por defecto cuando un indicador no está presente (vacío).
- Solo se muestra un registro con `break` para **evitar imprimir todo el archivo MARC** durante pruebas o demostraciones.


## Otros ejemplos

**(a)** ¿Cuál es el ID 001 del registro con el identificador OCLC 39818086?

```python
for record in reader:
    for f in record.get_fields('035'):
        if "39818086" in f.value():
            print(record['001'].value())
```

**(b)** ¿Cuántos registros tienen más de un campo 500?

```python
for record in reader:
    if len(record.get_fields('500')) > 1:
        print(record['001'].value())
```

**(c)** ¿Cuántos registros describen un ítem con inglés como idioma principal?

```python
for record in reader:
    if "eng" in record['008'].value():
        print(record['001'].value())
```
