[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PyMARC en Español",
    "section": "",
    "text": "Este repositorio y página espera recopilar una serie de talleres y tutoriales pare el uso de PyMARC en Español."
  },
  {
    "objectID": "index.html#objetivos",
    "href": "index.html#objetivos",
    "title": "PyMARC en Español",
    "section": "",
    "text": "Este repositorio y página espera recopilar una serie de talleres y tutoriales pare el uso de PyMARC en Español."
  },
  {
    "objectID": "index.html#talleres",
    "href": "index.html#talleres",
    "title": "PyMARC en Español",
    "section": "Talleres",
    "text": "Talleres\n\nTaller Introductorio PyMARC\n\nContenido derivado del curso PyMARC Basics del Library Carpentry\nLicensed under CC-BY 4.0 2025 by Metadata Services Unit, RDS, Yale Libraries\nLicensed under CC-BY 4.0 2018-2020 by The Carpentries\nLicensed under CC-BY 4.0 2016-2018 by Software Carpentry Foundation\n\nSample Data: edited_69x_subject.mrc"
  },
  {
    "objectID": "05_introduccion_pymarc3.html",
    "href": "05_introduccion_pymarc3.html",
    "title": "Editar con PyMARC",
    "section": "",
    "text": "Sample Data: edited_69x_subject.mrc\nEnlace al google colab (python Basics, PyMarc Basics)",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#copiando-registros-para-editar",
    "href": "05_introduccion_pymarc3.html#copiando-registros-para-editar",
    "title": "Editar con PyMARC",
    "section": "Copiando registros para editar",
    "text": "Copiando registros para editar\nCuando queremos modificar un registro, lo más seguro es copiarlo antes de editarlo. Esto evita que cambiemos el registro original.\nPara asegurarnos de que estamos creando un nuevo registro que podamos modificar sin afectar el registro original, podemos usar el método de Python deepcopy() para resolver este problema:\n\nfrom pymarc import MARCReader\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    for record in reader:\n        # Sin deepcopy es el mismo objecto\n        my_record = record\n        my_record[\"245\"][\"a\"] = \"Mi Nuevo Título\"\n        print (record[\"245\"])\n        print (my_record[\"245\"])\n        break\n\n=245  10$aMi Nuevo Título$f1977-2014 (inclusive).\n=245  10$aMi Nuevo Título$f1977-2014 (inclusive).\n\n\n\nfrom pymarc import MARCReader\nfrom copy import deepcopy\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    for record in reader:\n        # Usando deepcopy es un registro separado\n        my_record = deepcopy(record)\n        my_record[\"245\"][\"a\"] = \"Mi Nuevo Título\"\n        print (record[\"245\"])\n        print (my_record[\"245\"])\n        break\n\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\n=245  10$aMi Nuevo Título$f1977-2014 (inclusive).",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#editar-información-existente-en-un-registro",
    "href": "05_introduccion_pymarc3.html#editar-información-existente-en-un-registro",
    "title": "Editar con PyMARC",
    "section": "Editar información existente en un registro",
    "text": "Editar información existente en un registro\nVeamos cómo podemos cambiar una pieza de información ya existente dentro de un registro.\nActualmente, en nuestro registro podemos ver en el campo 100 una persona de nombre “Gray, Dorothy”\nComo ejercicio, imaginemos que nos informan que en realidad no es el nombre indicado, sino que lo es su hermana gemela: Gray, Amber.\n¡Necesitamos actualizar el registro para que sea correcto!\n\nfrom pymarc import MARCReader\nfrom copy import deepcopy\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\nold_name = \"Gray, Dorothy\"\nold_d = \"1922-1976\"\nnew_name = \"Gray, Amber\"\nnew_d = \"1922-1989\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    for record in reader:\n        try:\n            if old_name not in record[\"100\"][\"a\"]:\n                continue\n        except KeyError:\n            continue\n        my_record = deepcopy(record)\n\n        # Solo necesitamos actualizar el subcampo 'a'.\n        # Nota la puntuación del catalogador... ¡tenemos que incluir la coma!\n        if old_name in my_record['100']['a']:\n            my_record['100']['a'] = new_name\n            my_record['100']['d'] = new_d\n            # Comparamos el registro original y el modificado\n            print(record['100'])\n            print(my_record['100'])\n            break\n\n=100  1\\$aGray, Dorothy$d1922-1976\n=100  1\\$aGray, Amber$d1922-1989\n\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\n¿Cómo cambiarías la fecha de nacimiento en el subcampo d a “1920-”?\n\nmy_record['100']['d'] = \"1920-\"",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#eliminando-campos-de-un-registro",
    "href": "05_introduccion_pymarc3.html#eliminando-campos-de-un-registro",
    "title": "Editar con PyMARC",
    "section": "Eliminando campos de un registro",
    "text": "Eliminando campos de un registro\nSupongamos que queremos eliminar el campo 300:\n\nfrom pymarc import MARCReader\nfrom copy import deepcopy\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    for record in reader:\n        my_record = deepcopy(record)\n        for my_field in my_record.get_fields('300'):\n            my_record.remove_field(my_field)\n            print(my_record)\n        break\n\n=LDR  04819cpcaa2200505 a 4500\n=001  12251425\n=005  20240304103124.0\n=008  140917i19772014ctu\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\eng\\d\n=035  \\\\$9(YUL)ead.mssa.ms.2000\n=035  \\\\$a12251425\n=040  \\\\$aCtY$beng$cCtY$edacs\n=079  \\\\$a(OCoLC)1007214876\n=090  \\\\$aMS 2000\n=110  2\\$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\n=351  \\\\$aThe materials are arranged according to document type.\n=506  \\\\$aThe materials are open for research with the exception of the  electronic files, which are closed until processed.\n=520  \\\\$aThis collection consists of the records of Family Equality Council, a national advocacy organization for esbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Materials in the collection consist of correspondence, annual and quarterly reports, articles and clippings, board of directors records, event records, financial and fundraising records, publications, subject files, and electronic files. The collection is particularly strong both for its documentation of the group's activism and advocacy efforts, as well as its efforts to provide community for and document the everyday lives and experiences of LGBTQ families.\n=524  \\\\$aFamily Equality Council Records (MS 2000).  Manuscripts and Archives, Yale University Library.\n=540  \\\\$aCopyright is retained by the creator(s) of this collection for materials they have authored or otherwise produced. After the lifetime of the creator(s) or until January 1, 2039 (date), whichever comes first, copyright passes to Yale University whether such works are at Yale or physically located elsewhere in the world. Copyright status for other collection materials is unknown. Additional information is provided in the finding aid.\n=544  \\\\$aRelated material: Rainbow Families records (MS 2006).\n=545  \\\\$aFamily Equality Council is a national advocacy organization dedicated to securing equal rights for lesbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Family Equality Council has its origins in the Gay Fathers Coalition, an organization founded in 1979. In 1986, the Gay Fathers Coalition expanded to include lesbian mothers, prompting the group to rename itself the Gay and Lesbian Parents Coalition International (GLPCI). In 1998, GLPCI changed its name to the Family Pride Coalition in order to include bisexual and transgender parents among its members and constituents. In that same year, a group of youth who had been involved with Family Pride Coalition established a separate advocacy organization for the children of LGBTQ parents, Children of Lesbians and Gays Everywhere (COLAGE). In 2007, the Family Pride Coalition merged with Rainbow Families, and in that same year renamed itself again as Family Equality Council. Later, the group dropped Council from its name, becoming Family Equality in 2018.\n=546  \\\\$aThe materials are in English.\n=555  \\\\$aThe finding aid is available in the repository and on the Internet.\n=561  \\\\$aThe materials were the gift of Family Equality Council, 2014.\n=610  20$aCOLAGE.$0http://id.loc.gov/authorities/names/no2008088417\n=610  20$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=610  20$aFamily Pride Coalition.\n=610  20$aGay and Lesbian Parents Coalition International.$0http://id.loc.gov/authorities/names/nr2002025214\n=610  20$aGay Fathers Coalition.\n=610  20$aRainbow Families.\n=650  \\0$aAdoptive parents.$0http://id.loc.gov/authorities/subjects/sh92003241\n=650  \\0$aBisexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh98006061\n=650  \\0$aFamilies$zUnited States.$0http://id.loc.gov/authorities/subjects/sh85047032\n=650  \\0$aGay fathers.$0http://id.loc.gov/authorities/subjects/sh90000760\n=650  \\0$aGay men$xLegal status, laws, etc.$zUnited States.\n=650  \\0$aGay parents.$0http://id.loc.gov/authorities/subjects/sh85061779\n=650  \\0$aGay rights$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2008105072\n=650  \\0$aLesbian mothers.$0http://id.loc.gov/authorities/subjects/sh85076155\n=650  \\0$aTransgender people$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2012000715\n=650  \\0$aTranssexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2003008858\n=852  \\\\$aManuscripts and Archives,$bYale University Library,$eP.O. Box 208240, New Haven, CT  06520-8240.\n=856  42$3View a description and listing of collection contents in the finding aid$uhttp://hdl.handle.net/10079/fa/mssa.ms.2000\n=690  04$aLGBTQ resource.",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#eliminando-subcampos-específicos",
    "href": "05_introduccion_pymarc3.html#eliminando-subcampos-específicos",
    "title": "Editar con PyMARC",
    "section": "Eliminando subcampos específicos",
    "text": "Eliminando subcampos específicos\nEliminar subcampo 'd' del campo 100:\n\nfrom pymarc import MARCReader\nfrom copy import deepcopy\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    for record in reader:\n        # Verificar que el registro tenga campo `100` y subcampo `d`\n        if len(record.get_fields(\"100\")) &lt; 1:\n            continue\n        try:\n            d=record[\"100\"][\"d\"]\n        except KeyError:\n            continue\n\n        # Crear copia\n        my_record = deepcopy(record)\n\n        # Borrar subcampo\n        for field in my_record.get_fields('100'):\n            field.delete_subfield('d')\n        print(record[\"100\"])\n        print(my_record[\"100\"])\n\n        # Salir despues del primer ejemplo\n        break\n\n=100  1\\$aGray, Dorothy$d1922-1976\n=100  1\\$aGray, Dorothy",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#añadiendo-un-nuevo-campo-a-un-registro",
    "href": "05_introduccion_pymarc3.html#añadiendo-un-nuevo-campo-a-un-registro",
    "title": "Editar con PyMARC",
    "section": "Añadiendo un nuevo campo a un registro",
    "text": "Añadiendo un nuevo campo a un registro\nVeamos cómo podemos añadir un nuevo campo a un registro MARC.\nPara hacerlo, necesitamos crear un objeto de campo (Field) usando PyMARC, y luego agregarlo al registro.\nEn PyMARC existen dos tipos de campos:\n\nCampos de control (por ejemplo: 001, 005, 008)\n\nCampos no controlados (todos los que incluyen indicadores y subcampos, como 100, 245, 650)\n\nPodemos consultar la documentación de PyMARC para ver cómo se construye un objeto de tipo Field:\n\nfrom pymarc import Field\n\nprint(help(Field))\n\nHelp on class Field in module pymarc.field:\n\nclass Field(builtins.object)\n |  Field(tag: str, indicators: Optional[List[str]] = None, subfields: Optional[List[pymarc.field.Subfield]] = None, data: str = '')\n |\n |  Field() pass in the field tag, indicators and subfields for the tag.\n |\n |  .. code-block:: python\n |\n |      field = Field(\n |          tag = '245',\n |          indicators = ['0','1'],\n |          subfields = [\n |              Subfield(code='a', value='The pragmatic programmer : '),\n |              Subfield(code='b', value='from journeyman to master /'),\n |              Subfield(code='c', value='Andrew Hunt, David Thomas.'),\n |          ])\n |\n |  If you want to create a control field, don't pass in the indicators\n |  and use a data parameter rather than a subfields parameter:\n |\n |  .. code-block:: python\n |\n |      field = Field(tag='001', data='fol05731351')\n |\n |  Methods defined here:\n |\n |  __contains__(self, subfield: str) -&gt; bool\n |      Allows a shorthand test of field membership.\n |\n |      .. code-block:: python\n |\n |          'a' in field\n |\n |  __getitem__(self, code: str) -&gt; str\n |      Retrieve the first subfield with a given subfield code in a field.\n |\n |      Raises KeyError if `code` is not in the Field.\n |\n |      .. code-block:: python\n |\n |          field['a']\n |\n |  __init__(self, tag: str, indicators: Optional[List[str]] = None, subfields: Optional[List[pymarc.field.Subfield]] = None, data: str = '')\n |      Initialize a field `tag`.\n |\n |  __iter__(self)\n |\n |  __next__(self) -&gt; pymarc.field.Subfield\n |\n |  __setitem__(self, code: str, value: str) -&gt; None\n |      Set the values of the subfield code in a field.\n |\n |      .. code-block:: python\n |\n |          field['a'] = 'value'\n |\n |      Raises KeyError if there is more than one subfield code.\n |\n |  __str__(self) -&gt; str\n |      String representation of the field.\n |\n |      A Field object in a string context will return the tag, indicators\n |      and subfield as a string. This follows MARCMaker format; see [1]\n |      and [2] for further reference. Special character mnemonic strings\n |      have yet to be implemented (see [3]), so be forewarned. Note also\n |      for complete MARCMaker compatibility, you will need to change your\n |      newlines to DOS format ('CRLF').\n |\n |      [1] http://www.loc.gov/marc/makrbrkr.html#mechanics\n |      [2] http://search.cpan.org/~eijabb/MARC-File-MARCMaker/\n |      [3] http://www.loc.gov/marc/mnemonics.html\n |\n |  add_subfield(self, code: str, value: str, pos=None) -&gt; None\n |      Adds a subfield code/value to the end of a field or at a position (pos).\n |\n |      If pos is not supplied or out of range, the subfield will be added at the end.\n |\n |      .. code-block:: python\n |\n |          field.add_subfield('u', 'http://www.loc.gov')\n |          field.add_subfield('u', 'http://www.loc.gov', 0)\n |\n |  as_marc(self, encoding: str) -&gt; bytes\n |      Used during conversion of a field to raw marc.\n |\n |  as_marc21 = as_marc(self, encoding: str) -&gt; bytes\n |\n |  delete_subfield(self, code: str) -&gt; Optional[str]\n |      Deletes the first subfield with the specified 'code' and returns its value.\n |\n |      .. code-block:: python\n |\n |          value = field.delete_subfield('a')\n |\n |      If no subfield is found with the specified code None is returned.\n |\n |  format_field(self) -&gt; str\n |      Returns the field's subfields (or data in the case of control fields) as a string.\n |\n |      Like :func:`Field.value() &lt;pymarc.field.Field.value&gt;`, but prettier\n |      (adds spaces, formats subject headings).\n |\n |  get(self, code: str, default=None)\n |      A dict-like get method with a default value.\n |\n |      Implements a non-raising getter for a subfield code that will\n |      return the value of the first subfield whose code is `key`.\n |\n |  get_subfields(self, *codes) -&gt; List[str]\n |      Get subfields matching `codes`.\n |\n |      get_subfields() accepts one or more subfield codes and returns\n |      a list of subfield values.  The order of the subfield values\n |      in the list will be the order that they appear in the field.\n |\n |      .. code-block:: python\n |\n |          print(field.get_subfields('a'))\n |          print(field.get_subfields('a', 'b', 'z'))\n |\n |  is_control_field(self) -&gt; bool\n |      Returns true or false if the field is considered a control field.\n |\n |      Control fields lack indicators and subfields.\n |\n |  is_subject_field(self) -&gt; bool\n |      Returns True or False if the field is considered a subject field.\n |\n |      Used by :func:`format_field() &lt;pymarc.field.Field.format_field&gt;` .\n |\n |  linkage_occurrence_num(self) -&gt; Optional[str]\n |      Return the 'occurrence number' part of subfield 6, or None if not present.\n |\n |  subfields_as_dict(self) -&gt; Dict[str, List]\n |      Returns the subfields as a dictionary.\n |\n |      The dictionary is a mapping of subfield codes and values. Since\n |      subfield codes can repeat the values are a list.\n |\n |  value(self) -&gt; str\n |      Returns the field's subfields (or data in the case of control fields) as a string.\n |\n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |\n |  convert_legacy_subfields(subfields: List[str]) -&gt; List[pymarc.field.Subfield]\n |      Converts older-style subfield lists into Subfield lists.\n |\n |      Converts the old-style list of strings into a list of Subfields.\n |      As a class method this does not actually set any fields; it simply\n |      takes a list of strings and returns a list of Subfields.\n |\n |      .. code-block:: python\n |\n |          legacy_fields: list[str] = ['a', 'The pragmatic programmer : ',\n |                                      'b', 'from journeyman to master /',\n |                                      'c', 'Andrew Hunt, David Thomas']\n |\n |          coded_fields: list[Subfield] = Field.convert_legacy_subfields(legacy_fields)\n |\n |          myfield = Field(\n |              tag=\"245\",\n |              indicators = ['0','1'],\n |              subfields=coded_fields\n |          )\n |\n |      :param subfields: A list of [code, value, code, value]\n |      :return: A list of Subfield named tuples\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |\n |  data\n |\n |  indicator1\n |      Indicator 1.\n |\n |  indicator2\n |      Indicator 2.\n |\n |  indicators\n |\n |  subfields\n |\n |  tag\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |\n |  __slotnames__ = ['tag', 'data', 'indicators', 'subfields', '_Field__po...\n\nNone\n\n\nCreamos un nuevo campo 245 con subcampos:\n\nfrom pymarc import MARCReader, Field, Subfield\nfrom copy import deepcopy\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    for record in reader:\n        my_record = deepcopy(record)\n        nuevo_campo = Field(\n            tag='245',\n            indicators=['0', '1'],\n            subfields=[\n                Subfield(code=\"a\", value='The pragmatic programmer : '),\n                Subfield(code='b', value='from journeyman to master /'),\n                Subfield(code='c', value='Andrew Hunt, David Thomas.')\n            ]\n        )\n\n        my_record.add_ordered_field(nuevo_campo)\n        print(my_record)\n        break\n\n=LDR  04819cpcaa2200505 a 4500\n=001  12251425\n=005  20240304103124.0\n=008  140917i19772014ctu\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\eng\\d\n=035  \\\\$9(YUL)ead.mssa.ms.2000\n=035  \\\\$a12251425\n=040  \\\\$aCtY$beng$cCtY$edacs\n=079  \\\\$a(OCoLC)1007214876\n=090  \\\\$aMS 2000\n=110  2\\$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\n=245  01$aThe pragmatic programmer : $bfrom journeyman to master /$cAndrew Hunt, David Thomas.\n=300  \\\\$a11 linear feet. (23 boxes)\n=351  \\\\$aThe materials are arranged according to document type.\n=506  \\\\$aThe materials are open for research with the exception of the  electronic files, which are closed until processed.\n=520  \\\\$aThis collection consists of the records of Family Equality Council, a national advocacy organization for esbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Materials in the collection consist of correspondence, annual and quarterly reports, articles and clippings, board of directors records, event records, financial and fundraising records, publications, subject files, and electronic files. The collection is particularly strong both for its documentation of the group's activism and advocacy efforts, as well as its efforts to provide community for and document the everyday lives and experiences of LGBTQ families.\n=524  \\\\$aFamily Equality Council Records (MS 2000).  Manuscripts and Archives, Yale University Library.\n=540  \\\\$aCopyright is retained by the creator(s) of this collection for materials they have authored or otherwise produced. After the lifetime of the creator(s) or until January 1, 2039 (date), whichever comes first, copyright passes to Yale University whether such works are at Yale or physically located elsewhere in the world. Copyright status for other collection materials is unknown. Additional information is provided in the finding aid.\n=544  \\\\$aRelated material: Rainbow Families records (MS 2006).\n=545  \\\\$aFamily Equality Council is a national advocacy organization dedicated to securing equal rights for lesbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Family Equality Council has its origins in the Gay Fathers Coalition, an organization founded in 1979. In 1986, the Gay Fathers Coalition expanded to include lesbian mothers, prompting the group to rename itself the Gay and Lesbian Parents Coalition International (GLPCI). In 1998, GLPCI changed its name to the Family Pride Coalition in order to include bisexual and transgender parents among its members and constituents. In that same year, a group of youth who had been involved with Family Pride Coalition established a separate advocacy organization for the children of LGBTQ parents, Children of Lesbians and Gays Everywhere (COLAGE). In 2007, the Family Pride Coalition merged with Rainbow Families, and in that same year renamed itself again as Family Equality Council. Later, the group dropped Council from its name, becoming Family Equality in 2018.\n=546  \\\\$aThe materials are in English.\n=555  \\\\$aThe finding aid is available in the repository and on the Internet.\n=561  \\\\$aThe materials were the gift of Family Equality Council, 2014.\n=610  20$aCOLAGE.$0http://id.loc.gov/authorities/names/no2008088417\n=610  20$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=610  20$aFamily Pride Coalition.\n=610  20$aGay and Lesbian Parents Coalition International.$0http://id.loc.gov/authorities/names/nr2002025214\n=610  20$aGay Fathers Coalition.\n=610  20$aRainbow Families.\n=650  \\0$aAdoptive parents.$0http://id.loc.gov/authorities/subjects/sh92003241\n=650  \\0$aBisexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh98006061\n=650  \\0$aFamilies$zUnited States.$0http://id.loc.gov/authorities/subjects/sh85047032\n=650  \\0$aGay fathers.$0http://id.loc.gov/authorities/subjects/sh90000760\n=650  \\0$aGay men$xLegal status, laws, etc.$zUnited States.\n=650  \\0$aGay parents.$0http://id.loc.gov/authorities/subjects/sh85061779\n=650  \\0$aGay rights$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2008105072\n=650  \\0$aLesbian mothers.$0http://id.loc.gov/authorities/subjects/sh85076155\n=650  \\0$aTransgender people$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2012000715\n=650  \\0$aTranssexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2003008858\n=852  \\\\$aManuscripts and Archives,$bYale University Library,$eP.O. Box 208240, New Haven, CT  06520-8240.\n=856  42$3View a description and listing of collection contents in the finding aid$uhttp://hdl.handle.net/10079/fa/mssa.ms.2000\n=690  04$aLGBTQ resource.\n\n\n\nUsamos add_ordered_field() para insertar el campo en el lugar correcto.",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#validación",
    "href": "05_introduccion_pymarc3.html#validación",
    "title": "Editar con PyMARC",
    "section": "Validación",
    "text": "Validación\nPyMARC no valida si tu campo sigue el estándar MARC. Puedes crear campos no válidos, así que debes conocer las reglas del formato MARC. ¿Qué error introducimos al añadir un nuevo campo 245?",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#crear-un-registro-nuevo-desde-cero",
    "href": "05_introduccion_pymarc3.html#crear-un-registro-nuevo-desde-cero",
    "title": "Editar con PyMARC",
    "section": "Crear un registro nuevo desde cero",
    "text": "Crear un registro nuevo desde cero\n\nfrom pymarc import Record\n\nnuevo_registro = Record()\nprint(nuevo_registro)\n\n=LDR            22        4500\n\n\n\nContiene solo el campo obligatorio LEADER.\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nEjercicio: crea este registro\n\n\n\nEtiqueta\nInd1\nInd2\nSubcampos\n\n\n\n\n003\n\n\nNz\n\n\n100\n1\n\na: Gattuso, Jay, d: d1978-\n\n\n245\n1\n0\na: Goats…, b: What about cats!?\n\n\n650\n\n0\na: Goats, b: Competitive…\n\n\n650\n\n0\na: Cats, b: Competitive…\n\n\n\n\nfrom pymarc import Record, Field, Subfield\n\nnuevo_registro = Record()\ncampos = [\n    Field('003', data='Nz'),\n    Field(\n        tag='100', \n        indicators=['1',' '], \n        subfields=[\n            Subfield(code=\"a\", value=\"Gattuso, Jay,\"),\n            Subfield(code=\"d\", value=\"d1978-\")\n        ]\n    ),\n    Field(\n        tag='650', \n        indicators=[' ','0'], \n        subfields=[\n            Subfield(code=\"a\", value=\"Goats\"),\n            Subfield(code='b', value='Competitive Pet Keeping')\n        ]\n    ),\n    Field(\n        tag='650', \n        indicators=[' ','0'], \n        subfields=[\n            Subfield(code=\"a\", value=\"Cats\"),\n            Subfield(code='b', value='Competitive Pet Keeping')\n        ]\n    ),\n    Field(\n        tag='245', \n        indicators=['1','0'], \n        subfields=[\n            Subfield(code=\"a\", value='Goats. Are they the best animals? :'),\n            Subfield(code=\"b\", value='What about Cats!?')\n        ]\n    )\n]\n\nfor campo in campos:\n    nuevo_registro.add_ordered_field(campo)\n\nprint(nuevo_registro)\n\n=LDR            22        4500\n=003  Nz\n=100  1\\$aGattuso, Jay,$dd1978-\n=245  10$aGoats. Are they the best animals? :$bWhat about Cats!?\n=650  \\0$aGoats$bCompetitive Pet Keeping\n=650  \\0$aCats$bCompetitive Pet Keeping",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#importa-el-orden-de-los-campos",
    "href": "05_introduccion_pymarc3.html#importa-el-orden-de-los-campos",
    "title": "Editar con PyMARC",
    "section": "¿Importa el orden de los campos?",
    "text": "¿Importa el orden de los campos?\n\nNo siempre. El estándar MARC solo exige que los campos de control (001-009) vayan al inicio. Pero muchas herramientas esperan ver los campos ordenados numéricamente, por lo tanto se recomienda usar add_ordered_field() en lugar de add_field().",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#recursos",
    "href": "05_introduccion_pymarc3.html#recursos",
    "title": "Editar con PyMARC",
    "section": "Recursos",
    "text": "Recursos\n\nPyMARC docs\nEstructura MARC21",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "05_introduccion_pymarc3.html#otros-ejemplos",
    "href": "05_introduccion_pymarc3.html#otros-ejemplos",
    "title": "Editar con PyMARC",
    "section": "Otros ejemplos",
    "text": "Otros ejemplos\n\nConsecuencias no deseadas\n¿Cuál es el requisito implícito “oculto” en la tarea: “eliminar el campo 300 de nuestro registro”? ¿Qué impacto podría tener esto en nuestro proceso?\nPodríamos estar asumiendo que solo hay un campo 300 en el registro. Si asumimos eso y no lo verificamos, podríamos terminar eliminando más campos de los que esperábamos.\nEstrategias para evitar este problema\nTenemos varias estrategias para manejar este tipo de situaciones:\n\nConsultar el estándar: Verifica si se permite uno o varios campos 300 en un registro MARC.\n\nOjo: incluso si el estándar permite solo uno, podrías encontrar registros que no cumplen con él.\n\nRevisar el corpus: Analiza el conjunto de datos con el que estás trabajando para ver si la práctica común es tener uno o varios campos.\nAgregar lógica al script: Usa condiciones para asegurarte de que solo eliminas el campo cuando efectivamente hay uno solo.\n\nImplementación de la estrategia #3\nAquí un ejemplo de cómo implementar la validación lógica en el código:\n\nfrom pymarc import MARCReader\nfrom copy import deepcopy\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n\n    for record in reader:\n        my_record = deepcopy(record)\n\n        # Obtener lista de campos 300\n        my_fields = my_record.get_fields('300')\n\n        # Verificar que haya solo uno\n        if len(my_fields) == 1:\n            print(\"Solo un campo 300 encontrado en el registro ID {}. Eliminándolo.\".format(record['001'].value()))\n            for my_field in my_fields:\n                my_record.remove_field(my_field)\n        elif len(my_fields) &gt; 1:\n            print(\"Hay más de un campo 300 en el registro ID {}. No se elimina nada.\".format(record['001'].value()))\n        else:\n            print(\"No se halló el campo 300 en el registro ID {}. No se elimina nada.\".format(record['001'].value()))\n\n        # Comparación entre el registro original y el modificado\n        print(\"Campos 300 en el registro original:\", len(record.get_fields('300')))\n        print(\"Campos 300 en el registro modificado:\", len(my_record.get_fields('300')))\n        print()\n\n        # Prueba con campo 035\n\n        my_fields = my_record.get_fields('035')\n        if len(my_fields) == 1:\n            print(\"Solo un campo 035 encontrado en el registro ID {}. Eliminándolo.\".format(record['001'].value()))\n            for my_field in my_fields:\n                my_record.remove_field(my_field)\n        else:\n            print(\"Hay más de un campo 035 en el registro ID {}. No se elimina nada.\".format(record['001'].value()))\n\n        print(\"Campos 035 en el registro original:\", len(record.get_fields('035')))\n        print(\"Campos 035 en el registro modificado:\", len(my_record.get_fields('035')))\n\n        break\n\nSolo un campo 300 encontrado en el registro ID 12251425. Eliminándolo.\nCampos 300 en el registro original: 1\nCampos 300 en el registro modificado: 0\n\nHay más de un campo 035 en el registro ID 12251425. No se elimina nada.\nCampos 035 en el registro original: 2\nCampos 035 en el registro modificado: 2\n\n\nBuenas prácticas\n\nNunca asumas que un campo aparece solo una vez sin validarlo.\nSi el campo es obligatorio, asegúrate de que no lo eliminas accidentalmente sin reemplazarlo.\nImprime comparaciones antes y después para validar que el cambio tuvo el efecto esperado.",
    "crumbs": [
      "Editar con PyMARC"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html",
    "href": "03_introduccion_pymarc.html",
    "title": "Introducción a PyMarc",
    "section": "",
    "text": "Sample Data: edited_69x_subject.mrc\nEnlace al google colab (python Basics, PyMarc Basics)",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#qué-es-marc",
    "href": "03_introduccion_pymarc.html#qué-es-marc",
    "title": "Introducción a PyMarc",
    "section": "¿Qué es MARC?",
    "text": "¿Qué es MARC?\nMARC es el acrónimo de MAchine-Readable Cataloging (Catalogación legible por máquina). Define un formato de datos que surgió de una iniciativa liderada por la Biblioteca del Congreso de EE.UU. hace casi cuarenta años.\nEste formato proporciona un mecanismo para que los ordenadores puedan intercambiar, usar e interpretar información bibliográfica. Los elementos de datos de MARC forman la base de la mayoría de los catálogos de bibliotecas utilizados actualmente.\nEn los años 80 pasó a llamarse USMARC, y a fines de los años 90 se convirtió en MARC 21.\nRecursos útiles: - Sitio oficial de MARC: https://www.loc.gov/marc/ - Términos y definiciones MARC: https://www.loc.gov/marc/umb/um01to06.html#part3 - Formato MARC 21 para datos bibliográficos (completo y resumido): http://www.loc.gov/marc/bibliographic/",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#qué-es-pymarc",
    "href": "03_introduccion_pymarc.html#qué-es-pymarc",
    "title": "Introducción a PyMarc",
    "section": "¿Qué es PyMarc?",
    "text": "¿Qué es PyMarc?\nPyMARC es una biblioteca de Python diseñada para leer, escribir y manipular registros MARC (Machine-Readable Cataloging).\nEs muy útil para bibliotecarios, archivistas, desarrolladores y cualquier persona que necesite trabajar con catálogos bibliográficos en formato MARC, especialmente en contextos donde se desea automatizar tareas o integrar datos MARC en otros sistemas.\n¿Qué hace exactamente PyMARC? Con PyMARC puedes:\n\nLeer archivos MARC (.mrc o .marc)\nAcceder a campos y subcampos específicos (como el título, autor, etc.)\nExtraer datos y convertirlos a otros formatos (como JSON o CSV)\nCrear nuevos registros MARC desde cero\nEditar registros existentes\nGuardar los cambios en archivos MARC",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#por-qué-usar-pymarc-en-lugar-de-hacerlo-manualmente",
    "href": "03_introduccion_pymarc.html#por-qué-usar-pymarc-en-lugar-de-hacerlo-manualmente",
    "title": "Introducción a PyMarc",
    "section": "¿Por qué usar PyMARC en lugar de hacerlo manualmente?",
    "text": "¿Por qué usar PyMARC en lugar de hacerlo manualmente?\nEl formato MARC es complejo y binario, no es fácil de leer o procesar sin herramientas especializadas. PyMARC entiende esa estructura y nos da una forma clara de interactuar con ella usando código Python sencillo.",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#cuándo-usar-pymarc-y-cuándo-usar-marcedit",
    "href": "03_introduccion_pymarc.html#cuándo-usar-pymarc-y-cuándo-usar-marcedit",
    "title": "Introducción a PyMarc",
    "section": "¿Cuándo usar PyMARC y cuándo usar MarcEdit?",
    "text": "¿Cuándo usar PyMARC y cuándo usar MarcEdit?\n\n\n\n\n\n\n\n\nTarea o Necesidad\nPyMARC 🐍\nMarcEdit 🛠️\n\n\n\n\nAutomatizar tareas repetitivas o por lotes\n✅\n🚫\n\n\nProcesar registros MARC sin interfaz gráfica (ideal para servidores)\n✅\n🚫\n\n\nExtraer campos y convertir a CSV, JSON, Excel, etc. desde código\n✅\n🚫\n\n\nIntegrar con APIs, bases de datos, o herramientas como pandas\n✅\n🚫\n\n\nCrear scripts reproducibles o notebooks para talleres\n✅\n🚫\n\n\nEditar visualmente registros MARC uno por uno\n🚫\n✅\n\n\nUsar sin saber programar (interfaz amigable)\n🚫\n✅\n\n\nValidar registros MARC con reglas MARC21\n🚫\n✅\n\n\nConvertir entre MARC, MARCXML, MODS, Dublin Core\n✅ (Solo JSON y MARCXML)\n✅\n\n\nCargar datos desde hojas de cálculo y exportarlos como MARC\n✅\n✅\n\n\nTrabajar con autoridades (VIAF, Library of Congress, etc.)\n🚫\n✅\n\n\nPrevisualizar y editar campos de forma masiva con herramientas visuales\n🚫\n✅\n\n\n\n\n🐍 Usa PyMARC si necesitas automatizar, integrar con otras plataformas y transformar de MARC a otro esquema de metadatos. 🛠️ Usa MarcEdit si prefieres trabajar visualmente, sin programar, o para tareas de catalogación rápida.\n\nUn ejemplo concreto:\nQuieres extraer todos los títulos y números de control de 10,000 registros MARC y guardarlos en un CSV.\n\nCon MarcEdit: abrir archivo &gt; convertir a MARC-XML &gt; extraer campos con una herramienta &gt; guardar CSV (todo manual).\nCon PyMARC: un pequeño script de 10 líneas hace todo eso automáticamente.\n\n¿Y qué no puede hacer PyMARC tan fácilmente?\nJusto al revés, MarcEdit:\n\nTiene una interfaz visual amigable (no necesitas saber código).\nPermite hacer validaciones y conversiones MARC &lt;-&gt; MARCXML fácilmente.\nEs excelente para tareas pequeñas o puntuales.",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#leer-archivos-marc-con-pymarc",
    "href": "03_introduccion_pymarc.html#leer-archivos-marc-con-pymarc",
    "title": "Introducción a PyMarc",
    "section": "Leer archivos MARC con PyMARC",
    "text": "Leer archivos MARC con PyMARC\nPara leer archivos MARC, analicemos el siguiente script:\n\n# Importamos la biblioteca pymarc, que nos ayuda a leer archivos MARC\nimport pymarc\n\n# Definimos el nombre del archivo MARC que vamos a leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo binario ('rb' significa 'read binary')\nwith open(my_marc_file, 'rb') as data:\n    \n    # Creamos un lector de registros MARC a partir del archivo abierto\n    reader = pymarc.MARCReader(data)\n    \n    # Recorremos cada registro en el archivo MARC\n    for record in reader:\n        \n        # Imprimimos el título del registro (extraído del campo 245)\n        print(record)\n        # Detener después del primer registro (para ejemplo)\n        break\n\n=LDR  04819cpcaa2200505 a 4500\n=001  12251425\n=005  20240304103124.0\n=008  140917i19772014ctu\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\eng\\d\n=035  \\\\$9(YUL)ead.mssa.ms.2000\n=035  \\\\$a12251425\n=040  \\\\$aCtY$beng$cCtY$edacs\n=079  \\\\$a(OCoLC)1007214876\n=090  \\\\$aMS 2000\n=110  2\\$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\n=300  \\\\$a11 linear feet. (23 boxes)\n=351  \\\\$aThe materials are arranged according to document type.\n=506  \\\\$aThe materials are open for research with the exception of the  electronic files, which are closed until processed.\n=520  \\\\$aThis collection consists of the records of Family Equality Council, a national advocacy organization for esbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Materials in the collection consist of correspondence, annual and quarterly reports, articles and clippings, board of directors records, event records, financial and fundraising records, publications, subject files, and electronic files. The collection is particularly strong both for its documentation of the group's activism and advocacy efforts, as well as its efforts to provide community for and document the everyday lives and experiences of LGBTQ families.\n=524  \\\\$aFamily Equality Council Records (MS 2000).  Manuscripts and Archives, Yale University Library.\n=540  \\\\$aCopyright is retained by the creator(s) of this collection for materials they have authored or otherwise produced. After the lifetime of the creator(s) or until January 1, 2039 (date), whichever comes first, copyright passes to Yale University whether such works are at Yale or physically located elsewhere in the world. Copyright status for other collection materials is unknown. Additional information is provided in the finding aid.\n=544  \\\\$aRelated material: Rainbow Families records (MS 2006).\n=545  \\\\$aFamily Equality Council is a national advocacy organization dedicated to securing equal rights for lesbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Family Equality Council has its origins in the Gay Fathers Coalition, an organization founded in 1979. In 1986, the Gay Fathers Coalition expanded to include lesbian mothers, prompting the group to rename itself the Gay and Lesbian Parents Coalition International (GLPCI). In 1998, GLPCI changed its name to the Family Pride Coalition in order to include bisexual and transgender parents among its members and constituents. In that same year, a group of youth who had been involved with Family Pride Coalition established a separate advocacy organization for the children of LGBTQ parents, Children of Lesbians and Gays Everywhere (COLAGE). In 2007, the Family Pride Coalition merged with Rainbow Families, and in that same year renamed itself again as Family Equality Council. Later, the group dropped Council from its name, becoming Family Equality in 2018.\n=546  \\\\$aThe materials are in English.\n=555  \\\\$aThe finding aid is available in the repository and on the Internet.\n=561  \\\\$aThe materials were the gift of Family Equality Council, 2014.\n=610  20$aCOLAGE.$0http://id.loc.gov/authorities/names/no2008088417\n=610  20$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=610  20$aFamily Pride Coalition.\n=610  20$aGay and Lesbian Parents Coalition International.$0http://id.loc.gov/authorities/names/nr2002025214\n=610  20$aGay Fathers Coalition.\n=610  20$aRainbow Families.\n=650  \\0$aAdoptive parents.$0http://id.loc.gov/authorities/subjects/sh92003241\n=650  \\0$aBisexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh98006061\n=650  \\0$aFamilies$zUnited States.$0http://id.loc.gov/authorities/subjects/sh85047032\n=650  \\0$aGay fathers.$0http://id.loc.gov/authorities/subjects/sh90000760\n=650  \\0$aGay men$xLegal status, laws, etc.$zUnited States.\n=650  \\0$aGay parents.$0http://id.loc.gov/authorities/subjects/sh85061779\n=650  \\0$aGay rights$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2008105072\n=650  \\0$aLesbian mothers.$0http://id.loc.gov/authorities/subjects/sh85076155\n=650  \\0$aTransgender people$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2012000715\n=650  \\0$aTranssexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2003008858\n=852  \\\\$aManuscripts and Archives,$bYale University Library,$eP.O. Box 208240, New Haven, CT  06520-8240.\n=856  42$3View a description and listing of collection contents in the finding aid$uhttp://hdl.handle.net/10079/fa/mssa.ms.2000\n=690  04$aLGBTQ resource.\n\n\n\nEste pequeño script hace lo siguiente:\n\nImporta la biblioteca pymarc, que nos permite trabajar con registros MARC en Python.\nDefine el nombre del archivo que contiene nuestros registros MARC de ejemplo.\nAbre el archivo en modo binario (‘rb’) porque los archivos MARC no son archivos de texto comunes.\nUsa MARCReader para leer el contenido del archivo y lo recorre registro por registro.",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#comprendiendo-los-campos-marc-en-pymarc",
    "href": "03_introduccion_pymarc.html#comprendiendo-los-campos-marc-en-pymarc",
    "title": "Introducción a PyMarc",
    "section": "Comprendiendo los campos MARC en PyMARC",
    "text": "Comprendiendo los campos MARC en PyMARC\nEs útil entender la estructura de los objetos de datos que estamos viendo cuando leemos un registro MARC, y cómo se relacionan con el formato MARC tradicional que se utiliza en bibliotecas.\n¿Qué estamos viendo?\nObserva que la primera línea de un registro MARC en formato legible por humanos comienza con un signo de igual (=). Por ejemplo, la primera línea podría ser:\n=LDR  00912cam a2200301 a 4500\n\nEl signo igual = indica que se trata de una etiqueta de campo o tag.\nLos siguientes tres caracteres (LDR) nos dicen qué campo es.\nEn este caso, LDR significa leader o líder, una sección especial que contiene información codificada sobre el registro completo (como su tipo, estatus, etc.).\nTodos los demás campos MARC usan etiquetas numéricas de tres dígitos, por ejemplo:\n\n=245  10$aLarger than life :$bthe story of Eric Baume /$cby Arthur Manning.\n\nAquí 245 es el número de campo.\nLos dos dígitos que siguen (10) son los indicadores, que modifican el significado del campo.\nLo que sigue son los subcampos, precedidos por el símbolo $. En el ejemplo anterior serian los subcambos $a, $b y $c .\n\nDedica un momento a revisar las especificaciones MARC para este campo y compáralas con los datos que tenemos en este registro.\nhttp://www.loc.gov/marc/bibliographic/bd245.html",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#qué-tipos-de-campos-hay",
    "href": "03_introduccion_pymarc.html#qué-tipos-de-campos-hay",
    "title": "Introducción a PyMarc",
    "section": "¿Qué tipos de campos hay?",
    "text": "¿Qué tipos de campos hay?\nEn MARC, los campos se dividen en dos categorías principales:\n\n\n\n\n\n\n\n\nTipo de campo\nRango de etiquetas\nCaracterísticas principales\n\n\n\n\nCampos de control\n001–009\nNo tienen indicadores ni subcampos. Contienen información fija.\n\n\nCampos de datos\n010 en adelante\nIncluyen indicadores y subcampos, más complejos y ricos en contenido.\n\n\n\nGuía de campos de control en MARC",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#accesando-los-campos-de-un-archivo-marc",
    "href": "03_introduccion_pymarc.html#accesando-los-campos-de-un-archivo-marc",
    "title": "Introducción a PyMarc",
    "section": "Accesando los campos de un archivo MARC",
    "text": "Accesando los campos de un archivo MARC\n\nfrom pymarc import MARCReader  # Importamos la clase MARCReader desde la biblioteca pymarc\n\n# Definimos el nombre del archivo MARC que queremos leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo lectura binaria ('rb')\nwith open(my_marc_file, 'rb') as data:\n    # Creamos un lector MARC que puede recorrer los registros en el archivo\n    reader = MARCReader(data)\n    \n    # Iteramos sobre cada registro del archivo\n    for record in reader:\n        # Imprimimos el contenido completo del registro en formato legible\n        print(record)\n        # Detener después del primer registro (para ejemplo)\n        break\n\n=LDR  04819cpcaa2200505 a 4500\n=001  12251425\n=005  20240304103124.0\n=008  140917i19772014ctu\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\eng\\d\n=035  \\\\$9(YUL)ead.mssa.ms.2000\n=035  \\\\$a12251425\n=040  \\\\$aCtY$beng$cCtY$edacs\n=079  \\\\$a(OCoLC)1007214876\n=090  \\\\$aMS 2000\n=110  2\\$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\n=300  \\\\$a11 linear feet. (23 boxes)\n=351  \\\\$aThe materials are arranged according to document type.\n=506  \\\\$aThe materials are open for research with the exception of the  electronic files, which are closed until processed.\n=520  \\\\$aThis collection consists of the records of Family Equality Council, a national advocacy organization for esbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Materials in the collection consist of correspondence, annual and quarterly reports, articles and clippings, board of directors records, event records, financial and fundraising records, publications, subject files, and electronic files. The collection is particularly strong both for its documentation of the group's activism and advocacy efforts, as well as its efforts to provide community for and document the everyday lives and experiences of LGBTQ families.\n=524  \\\\$aFamily Equality Council Records (MS 2000).  Manuscripts and Archives, Yale University Library.\n=540  \\\\$aCopyright is retained by the creator(s) of this collection for materials they have authored or otherwise produced. After the lifetime of the creator(s) or until January 1, 2039 (date), whichever comes first, copyright passes to Yale University whether such works are at Yale or physically located elsewhere in the world. Copyright status for other collection materials is unknown. Additional information is provided in the finding aid.\n=544  \\\\$aRelated material: Rainbow Families records (MS 2006).\n=545  \\\\$aFamily Equality Council is a national advocacy organization dedicated to securing equal rights for lesbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Family Equality Council has its origins in the Gay Fathers Coalition, an organization founded in 1979. In 1986, the Gay Fathers Coalition expanded to include lesbian mothers, prompting the group to rename itself the Gay and Lesbian Parents Coalition International (GLPCI). In 1998, GLPCI changed its name to the Family Pride Coalition in order to include bisexual and transgender parents among its members and constituents. In that same year, a group of youth who had been involved with Family Pride Coalition established a separate advocacy organization for the children of LGBTQ parents, Children of Lesbians and Gays Everywhere (COLAGE). In 2007, the Family Pride Coalition merged with Rainbow Families, and in that same year renamed itself again as Family Equality Council. Later, the group dropped Council from its name, becoming Family Equality in 2018.\n=546  \\\\$aThe materials are in English.\n=555  \\\\$aThe finding aid is available in the repository and on the Internet.\n=561  \\\\$aThe materials were the gift of Family Equality Council, 2014.\n=610  20$aCOLAGE.$0http://id.loc.gov/authorities/names/no2008088417\n=610  20$aFamily Equality Council.$0http://id.loc.gov/authorities/names/no2012037822\n=610  20$aFamily Pride Coalition.\n=610  20$aGay and Lesbian Parents Coalition International.$0http://id.loc.gov/authorities/names/nr2002025214\n=610  20$aGay Fathers Coalition.\n=610  20$aRainbow Families.\n=650  \\0$aAdoptive parents.$0http://id.loc.gov/authorities/subjects/sh92003241\n=650  \\0$aBisexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh98006061\n=650  \\0$aFamilies$zUnited States.$0http://id.loc.gov/authorities/subjects/sh85047032\n=650  \\0$aGay fathers.$0http://id.loc.gov/authorities/subjects/sh90000760\n=650  \\0$aGay men$xLegal status, laws, etc.$zUnited States.\n=650  \\0$aGay parents.$0http://id.loc.gov/authorities/subjects/sh85061779\n=650  \\0$aGay rights$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2008105072\n=650  \\0$aLesbian mothers.$0http://id.loc.gov/authorities/subjects/sh85076155\n=650  \\0$aTransgender people$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2012000715\n=650  \\0$aTranssexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2003008858\n=852  \\\\$aManuscripts and Archives,$bYale University Library,$eP.O. Box 208240, New Haven, CT  06520-8240.\n=856  42$3View a description and listing of collection contents in the finding aid$uhttp://hdl.handle.net/10079/fa/mssa.ms.2000\n=690  04$aLGBTQ resource.\n\n\n\n¿Qué estamos haciendo aquí? record es un objeto creado por PyMARC que representa un solo registro MARC.\nPodemos utilizar este objeto para acceder solamente a los campos que nos interesan.\nPara hacer esto, le decimos a Python cuál es el nombre o la etiqueta del campo MARC que queremos extraer.\n\nfrom pymarc import MARCReader\nfrom sys import stderr\n# Definimos el nombre del archivo MARC que queremos leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo lectura binaria ('rb')\nwith open(my_marc_file, 'rb') as data:\n    # Creamos un lector MARC que puede recorrer los registros en el archivo\n    reader = MARCReader(data)\n    \n    # Iteramos sobre cada registro del archivo\n    for record in reader:\n        # Imprimimos el contenido completo del registro en formato legible\n        print(record['245'])\n        # Detener después del primer registro (para ejemplo)\n        break\n\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\n\n\nEn esta línea de código print(record)['245'] le estamos pidiendo a PyMARC que:\n\nBusque dentro del objeto record un campo cuya etiqueta sea 245 (que corresponde a la declaración de título del recurso).\nSi lo encuentra, lo imprime.\n\nEste método es muy útil cuando trabajamos con muchos campos pero solo necesitamos unos específicos, como el título (245), el autor (100), o materias (650).\n\nComprendiendo los tipos de datos y objetos en Python\nEl objeto record que crea PyMARC parece comportarse como un diccionario de Python (dict).\nY se accede a sus campos usando la sintaxis de corchetes, como:\nrecord['245']\nSin embargo, si le preguntamos directamente a Python qué tipo de objeto es usando la función type(), obtenemos algo más específico:\n&lt;class 'pymarc.record.Record'&gt;\nEsto nos dice que record es una instancia de una clase llamada Record, definida por la biblioteca pymarc.\n¿Por qué es importante saber esto?\nEn Python, cada objeto pertenece a un tipo de dato.\nSaber qué tipo de dato estamos usando nos ayuda a:\n\nAcceder correctamente a sus partes internas (como campos o métodos).\nPrevenir errores.\nUsar las funciones adecuadas con cada tipo de dato.\n\nLa sintaxis con corchetes (record[‘245’]) es una pista visual que recuerda a un diccionario (dict), donde una clave devuelve un valor:\nmi_diccionario = {'clave': 'valor'}\nprint(mi_diccionario['clave'])  # Imprime: valor\nAunque record no es exactamente un diccionario, se comporta de manera similar en muchos aspectos, porque la clase Record fue diseñada para imitar ese comportamiento.\nRecursos para seguir aprendiendo\nNo vamos a profundizar en esta lección en cómo funcionan las clases o los diccionarios, pero si te interesa, hay muchos recursos gratuitos donde puedes aprender más. Tutoriales de Python\nComparación visual: Diccionario Python vs Objeto record de PyMARC\n\n\n\nConcepto\nDiccionario en Python 🧺\nObjeto record en PyMARC 📚\n\n\n\n\nTipo de dato\ndict\npymarc.record.Record\n\n\nCreación\nmi_dic = {'245': 'Título'}\nrecord = MARCReader(data)\n\n\nAcceso a datos\nmi_dic['245']\nrecord['245']\n\n\nQué devuelve\nEl valor asociado a la clave\nEl campo MARC completo (con subcampos e indicadores)\n\n\nPistas visuales\nUso de corchetes []\nTambién usa corchetes []\n\n\nMétodos útiles\n.keys(), .values()\n.get_fields(), .title()\n\n\nEs realmente un diccionario?\n✅ Sí\n❌ No, pero se comporta similar\n\n\nMás información\ndocs.python.org\nPyMARC docs\n\n\n\n¿Por qué importa esto?\nSaber cómo acceder a la información dentro de un objeto es clave para trabajar con MARC en Python.\nAunque record no sea técnicamente un diccionario, PyMARC lo diseñó para que se sienta como uno, facilitando su uso para principiantes.\n\n\nCómo extraer múltiples campos en PyMARC\nSi queremos extraer varios campos MARC específicos (por ejemplo, autor, título, descripción física, autor adicional), podemos usar un bucle y acceder a cada uno individualmente dentro del registro.\n\nfrom pymarc import MARCReader\n\n# Definimos el nombre del archivo MARC que queremos leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo lectura binaria ('rb')\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    \n    # Iteramos sobre cada registro\n    for record in reader:\n        # Extraemos e imprimimos varios campos MARC\n        try:\n            print(record.leader)\n            print(record['100'])  # Autor principal\n            print(record['245'])  # Título\n            print(record['300'])  # Descripción física\n            print(record['700'])  # Autor adicional (si lo hay)\n        except KeyError as error:\n            print(f\"{record.leader} -&gt; {type(error)}\")\n            continue\n        # Detener después del primer registro (para ejemplo)\n        break\n\n04819cpcaa2200505 a 4500\n04819cpcaa2200505 a 4500 -&gt; &lt;class 'KeyError'&gt;\n03423cpcaa2200421 a 4500\n03423cpcaa2200421 a 4500 -&gt; &lt;class 'KeyError'&gt;\n08224cpcaa22009377a 4500\n=100  1\\$aO'Leary, Jean.\n=245  10$aJean O'Leary papers,$f1963-2005.\n=300  \\\\$a18.35$flinear feet (20 boxes)\n08224cpcaa22009377a 4500 -&gt; &lt;class 'KeyError'&gt;\n05319cpcaa2200505 i 4500\n05319cpcaa2200505 i 4500 -&gt; &lt;class 'KeyError'&gt;\n03917cpcaa2200373 i 4500\n=100  1\\$aAntisdale, Michael.\n=245  10$aMichael Antisdale and Mark R. Melanson Papers,$f1995-2003 (inclusive).\n=300  \\\\$a1.2 linear foot (5 boxes)\n=700  1\\$aMelanson, Mark R.\n\n\nNota: Cada línea print(record[‘XXX’]) intenta acceder a un campo específico por su etiqueta MARC.\nSi el campo no existe en ese registro, PyMARC levantará un error de tipo KeyError.\nAlternativamente, puedes usar la función .get_fields() para obtener varios campos en un objecto iterable sin levantar ningún error:\n\nfrom pymarc import MARCReader\n\n# Definimos el nombre del archivo MARC que queremos leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo lectura binaria ('rb')\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    \n    # Iteramos sobre cada registro\n    for record in reader:\n        campos = record.get_fields('100','245', '300', '700')\n        for campo in campos:\n            print(campo)\n        # Detener después del primer registro (para ejemplo)\n        break\n\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\n=300  \\\\$a11 linear feet. (23 boxes)\n\n\nEsto es útil cuando quieres recorrer dinámicamente los campos encontrados en el registro.\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nDescarga el archivo MARC presentado en esta unidad. Intenta: - Leerlo - Pedir multiples campos\nImprime cada una utilizando la función print.",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#acceder-a-subcampos-marc-específicos-con-pymarc",
    "href": "03_introduccion_pymarc.html#acceder-a-subcampos-marc-específicos-con-pymarc",
    "title": "Introducción a PyMarc",
    "section": "Acceder a subcampos MARC específicos con PyMARC",
    "text": "Acceder a subcampos MARC específicos con PyMARC\nPodemos usar el mismo método de “clave” (key) para acceder a los subcampos dentro de un campo MARC específico.\nEjemplo:\n\nfrom pymarc import MARCReader\n\n# Definimos el nombre del archivo MARC que queremos leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo lectura binaria ('rb')\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    \n    # Iteramos sobre cada registro\n    try:\n        for record in reader:\n            # Extraemos e imprimimos varios campos MARC\n            print(\"Subcampo 'a':\", record['245']['a'])\n            print(\"Subcampo 'b':\", record['245']['b'])\n            print(\"Subcampo 'c':\", record['245']['c'])\n            # Detener después del primer registro (para ejemplo)\n            break\n    except KeyError as error:\n        print(error)\n        # raise error\n        pass\n\nSubcampo 'a': Family Equality Council records,\n\n\n\n¿Qué está ocurriendo aquí?\nEn cada línea del bloque print(...) le estamos pidiendo a Python que haga lo siguiente:\n\nBusque dentro del objeto llamado record.\nLocalice el campo que tiene la etiqueta ‘245’ (es decir, el campo de título en MARC).\nDentro de ese campo, acceda al subcampo que tenga la letra a, b o c.\n\nObserva que cada campo de un registro se comporta como un diccionario de subcampos.\nEste método funciona solo si el campo y los subcampos existen. Si algún subcampo está ausente en un registro, obtendrás un error del tipo KeyError.\nNOTA: El código anterior fracasa cuando trata de obtener el subcampo b que no está presente en el campo 245 del registro.\nPara evitar eso, puedes usar el método .get_subfields, una forma más segura de accesso:\n\nfrom pymarc import MARCReader\n\n# Definimos el nombre del archivo MARC que queremos leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo lectura binaria ('rb')\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    \n    # Iteramos sobre cada registro\n    for record in reader:\n        titulo = record['245']\n        if titulo:\n            print(\"Subcampo 'a':\", titulo.get_subfields('a'))\n            print(\"Subcampo 'b':\", titulo.get_subfields('b'))\n            print(\"Subcampo 'c':\", titulo.get_subfields('c'))\n        # Detener después del primer registro (para ejemplo)\n        break\n\nSubcampo 'a': ['Family Equality Council records,']\nSubcampo 'b': []\nSubcampo 'c': []\n\n\nEsto devuelve listas con los subcampos encontrados (o listas vacías si no existen).",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "03_introduccion_pymarc.html#métodos-útiles-en-pymarc-para-acceder-a-campos-marc",
    "href": "03_introduccion_pymarc.html#métodos-útiles-en-pymarc-para-acceder-a-campos-marc",
    "title": "Introducción a PyMarc",
    "section": "Métodos útiles en PyMARC para acceder a campos MARC",
    "text": "Métodos útiles en PyMARC para acceder a campos MARC\nEl objeto de tipo record que PyMARC crea ofrece varios métodos útiles para acceder a los datos.\nUno de ellos es .value(), que devuelve el contenido completo del campo como texto plano, sin subcampos ($) ni indicadores.\nPyMARC incluye métodos “accesibles” como .title(), que devuelve el contenido del campo 245 ya procesado como un título legible para humanos.\nMétodos comunes de PyMARC explicados\n\n\n\n\n\n\n\n\n\n\nMétodo\nSe usa con…\n¿Qué hace?\nTipo de dato que devuelve\nEjemplo\n\n\n\n\nrecord['245']\nrecord\nAccede a un campo MARC específico por etiqueta\nField\nrecord['245']\n\n\nrecord['245']['a']\nField\nDevuelve el contenido del subcampo 'a' del campo\nstr (texto)\nrecord['245']['a']\n\n\nrecord.get_fields('245')\nrecord\nDevuelve una lista de todos los campos con esa etiqueta\nlist de Field\nrecord.get_fields('245')\n\n\nfield.value()\nField\nDevuelve todo el contenido del campo como texto plano\nstr\nrecord['245'].value()\n\n\nfield.get_subfields('a')\nField\nDevuelve una lista de todos los subcampos con esa etiqueta\nlist de str\nrecord['245'].get_subfields('a')\n\n\nrecord.title()\nrecord\nDevuelve el título procesado como texto legible (usa campo 245)\nstr\nrecord.title()\n\n\nrecord['001'].value()\nrecord\nDevuelve el número de control del registro (campo 001) como texto\nstr\nrecord['001'].value()\n\n\ntype(objeto)\nCualquier objeto\nMuestra el tipo de dato del objeto\ntype\ntype(record['245'])\n\n\n\nPuedes combinar varios métodos, por ejemplo:\n\nfrom  pymarc import MARCReader\n\n# Definimos el nombre del archivo MARC que queremos leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo lectura binaria ('rb')\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n\n    # Iteramos sobre cada registro\n    for record in reader:\n        # Exploramos el tipo de objeto 'record' y su campo 245\n        print(\"Tipo del objeto completo:\")\n        print(type(record))\n        print()\n\n        print(\"Campo 245 crudo:\")\n        print(record['245'])\n        print(\"Tipo del campo 245:\")\n        print(type(record['245']))\n        print()\n\n        print(\"Campo 245 como texto (value):\")\n        print(record['245'].value())\n        print(\"Tipo del texto:\")\n        print(type(record['245'].value()))\n        print()\n\n        print(\"Subcampo 'a' del campo 245:\")\n        print(record['245']['a'])\n        print(\"Tipo del subcampo 'a':\")\n        print(type(record['245']['a']))\n        print()\n\n        print(\"Método record.title():\")\n        print(record.title)\n        print(\"Tipo del resultado de record.title():\")\n        print(type(record.title))\n        print()\n\n        # Mostramos todos los campos 650 y 651 (materias)\n        print(\"Campos de materias (650 y 651):\")\n        materias = record.get_fields('650', '651')\n        for campo in materias:\n            print(campo)\n        print()\n\n        # Subcampos 'a' y 'b' del campo 245\n        titulo = record['245']\n        if titulo:\n            print(\"Subcampos 'a' y 'b' del campo 245:\")\n            subcampos = titulo.get_subfields('a', 'b')\n            for sub in subcampos:\n                print(sub)\n        # Detener después del primer registro (para ejemplo)\n        break\n\nTipo del objeto completo:\n&lt;class 'pymarc.record.Record'&gt;\n\nCampo 245 crudo:\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\nTipo del campo 245:\n&lt;class 'pymarc.field.Field'&gt;\n\nCampo 245 como texto (value):\nFamily Equality Council records, 1977-2014 (inclusive).\nTipo del texto:\n&lt;class 'str'&gt;\n\nSubcampo 'a' del campo 245:\nFamily Equality Council records,\nTipo del subcampo 'a':\n&lt;class 'str'&gt;\n\nMétodo record.title():\nFamily Equality Council records,\nTipo del resultado de record.title():\n&lt;class 'str'&gt;\n\nCampos de materias (650 y 651):\n=650  \\0$aAdoptive parents.$0http://id.loc.gov/authorities/subjects/sh92003241\n=650  \\0$aBisexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh98006061\n=650  \\0$aFamilies$zUnited States.$0http://id.loc.gov/authorities/subjects/sh85047032\n=650  \\0$aGay fathers.$0http://id.loc.gov/authorities/subjects/sh90000760\n=650  \\0$aGay men$xLegal status, laws, etc.$zUnited States.\n=650  \\0$aGay parents.$0http://id.loc.gov/authorities/subjects/sh85061779\n=650  \\0$aGay rights$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2008105072\n=650  \\0$aLesbian mothers.$0http://id.loc.gov/authorities/subjects/sh85076155\n=650  \\0$aTransgender people$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2012000715\n=650  \\0$aTranssexuals$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2003008858\n\nSubcampos 'a' y 'b' del campo 245:\nFamily Equality Council records,\n\n\n¿Qué incluye este script?\n\nAnálisis del campo 245 con distintos métodos ([‘a’], .value(), .title())\nAcceso seguro a subcampos\nExtracción de materias geográficas y temáticas (650, 651)\nUso de type() para mostrar los tipos de datos",
    "crumbs": [
      "Introducción a PyMarc"
    ]
  },
  {
    "objectID": "01_introduccion.html",
    "href": "01_introduccion.html",
    "title": "Introducción y Configuración",
    "section": "",
    "text": "Descripción:\nEn este taller, se enseñará cómo utilizar Python y PyMARC para gestionar registros MARC en masa de manera eficiente y automatizada. Se explorarán métodos para extraer, modificar y guardar metadatos bibliográficos, facilitando su manejo en bibliotecas y archivos.\nTemas a tratar:\nAgenda Tentativa (1hr 45 minutos):",
    "crumbs": [
      "Introducción y Configuración"
    ]
  },
  {
    "objectID": "01_introduccion.html#qué-es-google-colab",
    "href": "01_introduccion.html#qué-es-google-colab",
    "title": "Introducción y Configuración",
    "section": "¿Qué es Google Colab?",
    "text": "¿Qué es Google Colab?\nGoogle Colab (abreviación de Google Colaboratory) es una plataforma gratuita creada por Google que permite escribir y ejecutar código en Python directamente desde tu navegador, sin necesidad de instalar nada en tu computadora. Es especialmente popular entre personas que trabajan con ciencia de datos, aprendizaje automático, análisis de datos y educación.\nCaracterísticas principales:\n\nBasado en Jupyter Notebooks: Usa el mismo formato que los notebooks de Jupyter (.ipynb), lo que permite combinar código, texto, imágenes y visualizaciones en un solo documento.\nEjecución en la nube: Todo corre en los servidores de Google, así que no necesitas una computadora potente.\nIntegración con Google Drive: Puedes guardar tus notebooks directamente en tu cuenta de Drive y compartirlos fácilmente.\nColaboración en tiempo real: Al estilo de Google Docs, puedes trabajar con otras personas en el mismo notebook.",
    "crumbs": [
      "Introducción y Configuración"
    ]
  },
  {
    "objectID": "01_introduccion.html#accesando-google-colab",
    "href": "01_introduccion.html#accesando-google-colab",
    "title": "Introducción y Configuración",
    "section": "Accesando Google Colab",
    "text": "Accesando Google Colab\n\nAccede a la página de Google Colab\n\n\n\n\nAcceder a Google Colab\n\n\n\nCrea un nuevo cuaderno pulsando el botón “New Notebook” (Nuevo cuaderno).\n\nPuedes cambiar el nombre del cuaderno, pulsando al lado del logo de Google Drive.\n\n\n\n\n\nNuevo Cuaderno de Google Colab\n\n\n\nEl primer bloque con el ícono de reproducir, usualmente es un bloque para escribir código. Puedes seguir añadiendo bloques de código o texto según tus necesidades.\n\n\n\n\nBloque de código o texto",
    "crumbs": [
      "Introducción y Configuración"
    ]
  },
  {
    "objectID": "01_introduccion.html#conectar-google-colab-a-tu-google-drive",
    "href": "01_introduccion.html#conectar-google-colab-a-tu-google-drive",
    "title": "Introducción y Configuración",
    "section": "Conectar Google Colab a tu Google Drive",
    "text": "Conectar Google Colab a tu Google Drive\nPara conectar tu Google Colab a tu Google Drive y poder acceder a tus archivos, haz lo siguiente:\n\nEn el menu a la izquerda de la página, pulsa sobre el ícono de archivo. Te saldrá un menú con diferentes opciones.\nEn el menú, ubica el archivo con el logo de Google Drive, y pulsa sobre él.\n\nAl pulsar, te aparecerá una notificación que pregunta si deseas permitir que el cuaderno acceda a tus archivos en Google Drive. Si autorizas:\n\nSe abrirá una pantalla permitiéndote elegir el correo electrónico que deseas usar.\nEsta configuración se realiza cada vez que creas un cuaderno nuevo y puede ser revocada en cualquier momento.\n\n\n\n\n\n\nAutorizar la conexión entre Google Colab y Google Drive",
    "crumbs": [
      "Introducción y Configuración"
    ]
  },
  {
    "objectID": "01_introduccion.html#preparando-un-ambiente-de-programación",
    "href": "01_introduccion.html#preparando-un-ambiente-de-programación",
    "title": "Introducción y Configuración",
    "section": "Preparando un ambiente de programación",
    "text": "Preparando un ambiente de programación\nPreparar el ambiente de programación significa asegurarse de que tenemos todo lo necesario para trabajar: las herramientas, las bibliotecas y las versiones correctas.\nEs importante instalar las bibliotecas que sabemos que necesitaremos porque eso nos permite comenzar a trabajar sin errores por falta de funciones.\nA veces no sabemos todo lo que vamos a necesitar desde el inicio, y eso está bien: podemos ir agregando nuevas bibliotecas a medida que nuestro código se desarrolla o cambia.",
    "crumbs": [
      "Introducción y Configuración"
    ]
  },
  {
    "objectID": "01_introduccion.html#qué-es-una-librería-de-python",
    "href": "01_introduccion.html#qué-es-una-librería-de-python",
    "title": "Introducción y Configuración",
    "section": "¿Qué es una librería de Python?",
    "text": "¿Qué es una librería de Python?\nUna biblioteca (o librería) en Python es un conjunto de funciones y herramientas ya escritas por otras personas, que puedes usar para hacer tareas específicas sin tener que escribir todo el código desde cero.\nPor ejemplo, si quieres trabajar con fechas, hay una biblioteca llamada datetime; si quieres leer archivos CSV, hay una biblioteca llamada csv, si quieres leer archivos MARC, puedes usar la biblioteca pymarc; y si necesitas organizar, analizar o limpiar datos en forma de tabla, una opción muy común es la biblioteca pandas.",
    "crumbs": [
      "Introducción y Configuración"
    ]
  },
  {
    "objectID": "01_introduccion.html#cómo-instalo-una-libreria-en-google-colab",
    "href": "01_introduccion.html#cómo-instalo-una-libreria-en-google-colab",
    "title": "Introducción y Configuración",
    "section": "¿Cómo instalo una libreria en Google Colab?",
    "text": "¿Cómo instalo una libreria en Google Colab?\nEn Google Colab, instalar una biblioteca es muy sencillo. Solo necesitas escribir una línea de código en una celda, empezando con el signo de exclamación (!) para usar comandos del sistema.\n\n!pip install pymarc\n\nRequirement already satisfied: pymarc in /Users/if224/.local/environments/reportsdb/lib/python3.12/site-packages (5.1.2)\n\n\nEste comando le dice a Colab que use pip (el instalador de paquetes de Python) para instalar la biblioteca pymarc.\nAlgunos puntos útiles:\n\nSolo necesitas hacerlo una vez por sesión.\nSi la biblioteca ya está instalada, Colab te lo indicará.",
    "crumbs": [
      "Introducción y Configuración"
    ]
  },
  {
    "objectID": "02_introduccion_python.html",
    "href": "02_introduccion_python.html",
    "title": "Python 101",
    "section": "",
    "text": "Python fue inventado por Guido Van Rossum porque quería un lenguaje cuyo principal objetivo fuera proporcionar legibilidad del código y una mayor productividad para los desarrolladores. La idea se le ocurrió en 1980 y trabajó en el proyecto de manera ocasional durante sus vacaciones. No se convirtió en un lenguaje utilizable hasta 1991.\nActualmente, Python es uno de los lenguajes de programación más utilizados y cuenta con un gran respaldo de la comunidad y abundante documentación.\n\n\n\n\n\n\nDetalles a tener en cuenta\n\n\n\n\nExisten muchas maneras diferentes de realizar un mismo proceso.\nEscribe los pasos que necesitas seguir para obtener un resultado (pseudocódigo).\nBusca, busca y sigue buscando: Sitios web como StackOverflow pueden ayudarte con cualquier duda. Es posible que otras personas ya hayan hecho la misma pregunta en ese espacio.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#qué-es-python",
    "href": "02_introduccion_python.html#qué-es-python",
    "title": "Python 101",
    "section": "",
    "text": "Python fue inventado por Guido Van Rossum porque quería un lenguaje cuyo principal objetivo fuera proporcionar legibilidad del código y una mayor productividad para los desarrolladores. La idea se le ocurrió en 1980 y trabajó en el proyecto de manera ocasional durante sus vacaciones. No se convirtió en un lenguaje utilizable hasta 1991.\nActualmente, Python es uno de los lenguajes de programación más utilizados y cuenta con un gran respaldo de la comunidad y abundante documentación.\n\n\n\n\n\n\nDetalles a tener en cuenta\n\n\n\n\nExisten muchas maneras diferentes de realizar un mismo proceso.\nEscribe los pasos que necesitas seguir para obtener un resultado (pseudocódigo).\nBusca, busca y sigue buscando: Sitios web como StackOverflow pueden ayudarte con cualquier duda. Es posible que otras personas ya hayan hecho la misma pregunta en ese espacio.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#variables",
    "href": "02_introduccion_python.html#variables",
    "title": "Python 101",
    "section": "Variables",
    "text": "Variables\nEn Python, podemos asignar (darle un nombre a un valor asociándolo con una variable) un objeto o valor a una variable (un valor que tiene un nombre asociado), utilizando el signo de igualdad =.\nPor ejemplo, para asignar el valor 100 a una variable weight_lb, ejecutaríamos:\n\nweight_lb = 100\n\nA partir de ahora, cada vez que usemos weight_lb, Python se referirá al Objeto al que apunta (en este caso, un número entero con el valor 100) y sustituirá efectivamente su valor donde se utilice la variable.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#reglas-para-las-variables-en-python",
    "href": "02_introduccion_python.html#reglas-para-las-variables-en-python",
    "title": "Python 101",
    "section": "Reglas para las Variables en Python",
    "text": "Reglas para las Variables en Python\nEn Python, los nombres de las variables:\n\nSolo pueden contener caracteres alfanuméricos y guiones bajos (A-z, 0-9, y _).\nSon sensibles a mayúsculas y minúsculas.\nNo pueden comenzar con un dígito.\nNo pueden incluir caracteres especiales.\nNo pueden ser palabras reservadas de Python (and, as, if, else, elif, for, entre muchas otras).\n\nEsto significa que, por ejemplo:\n\nweight0 es un nombre de variable válido, mientras que 0weight no lo es.\nweight y Weight son variables diferentes.\nLa variable age no es lo mismo que AGE o Age. age, AGE y Age serán tres variables distintas.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#usando-variables-en-python",
    "href": "02_introduccion_python.html#usando-variables-en-python",
    "title": "Python 101",
    "section": "Usando Variables en Python",
    "text": "Usando Variables en Python\nPara mostrar el valor de una variable en la pantalla en Python, podemos usar la función print.\n\nprint(weight_lb)\n\n100",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#tipos-de-datos",
    "href": "02_introduccion_python.html#tipos-de-datos",
    "title": "Python 101",
    "section": "Tipos de Datos",
    "text": "Tipos de Datos\nPython reconoce varios tipos de datos.\nLos cuatro más básicos (sin incluir los tipos de colección) son:\n\nNúmeros enteros (integer) - números sin decimales, como 1234.\nNúmeros de punto flotante (float) - números decimales, como 1.34545.\nCadenas de texto (strings) - secuencias de caracteres, como \"¡Hola mundo!\".\nBooleanos (booleans) - un tipo binario que solo puede tener los valores True o False.\n\nTambién hay estructuras de colección:\n\nListas (list) – estructuras utilizadas para almacenar múltiples elementos en una sola variable, como mylist = [\"manzana\", \"banana\", \"cereza\"].\nDiccionarios (dictionary) – estructuras que almacenan pares de clave y valor. Son útiles para buscar datos asociados a una clave específica. Ejemplo: persona = {\"nombre\": \"Ana\", \"edad\": 30, \"ciudad\": \"Madrid\"}\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nIntenta crear algunas variables de los tres tipos básicos que hemos visto: Entero (Integer), Punto Flotante (Floating Point) y Cadena de Texto (String).\nImprime cada una utilizando la función print.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#cambiando-el-valor-de-una-variable",
    "href": "02_introduccion_python.html#cambiando-el-valor-de-una-variable",
    "title": "Python 101",
    "section": "Cambiando el Valor de una Variable",
    "text": "Cambiando el Valor de una Variable\nPuedes cambiar el valor de una variable en cualquier momento reasignando su valor.\n\n# Reasignando el valor de la variable weight_lb\nweight_lb = 200\n\n\n# Reasignando el valor de la variable weight_lb\nprint(weight_lb)\n\n200\n\n\n\n\n\n\n\n\nConsejo\n\n\n\nUsa # para dejar notas sobre lo que hace un bloque de código.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#funciones-integradas-y-operadores-básicos",
    "href": "02_introduccion_python.html#funciones-integradas-y-operadores-básicos",
    "title": "Python 101",
    "section": "Funciones Integradas y Operadores Básicos",
    "text": "Funciones Integradas y Operadores Básicos\n\nFunciones Integradas (Built-In Functions)\n\nprint() - imprime una declaración en pantalla.\nmax() - encuentra el valor más grande de uno o más valores.\nmin() - encuentra el valor más pequeño de uno o más valores.\nround() - devuelve un número de punto flotante redondeado según el valor especificado.\ninput() - permite la entrada de datos por parte del usuario.\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nEscribe un programa que imprima tu nombre.\nEl código a continuación está parcialmente escrito. Dentro de las flechas &lt;&lt; &gt;&gt;, escribe el valor correcto.\nUna vez que tengas los valores correctos, recuerda eliminar las flechas, ya que dejarlas en el código podría causar errores.\n\nprint(\"What is your name?\")\n\nname = &lt;&lt;What would be the appropriate function to use here?&gt;&gt;\n\nprint(f\"Hello, {'&lt;What would be the appropiate variable to use here&gt;'}!\")\n\n\n\n\n\n\nOperadores\nLos operadores son símbolos que realizan operaciones específicas en uno o más objetos. Un subconjunto de estos son los operadores aritméticos con los que probablemente ya estés familiarizado:\n\nMultiplicación: a * b\nSuma: a + b\nResta: a - b\nDivisión: a / b\nAsignación: a = b\nSuma/Resta y asignación: a += b, a -= b\nExponente: a ** b (ejemplo: 10**3 = 1000)\nMódulo: % (ejemplo: 9 % 4 = 1)\nDivisión Entera: a // b (ejemplo: 9 // 4 = 2)\nIndexación: []\n\nPuedes notar que la asignación (=), que ya hemos utilizado, es solo otro operador: intentará asignar el objeto o valor de la derecha a la variable de la izquierda.\nOtro operador que usarás con frecuencia es el operador de indexación ([]), que generalmente se utiliza para acceder a elementos dentro de colecciones, como obtener un solo carácter de una cadena de texto.\n\n\n\n\n\n\nLos índices en Python comienzan en 0\n\n\n\nEsto significa que el primer elemento tiene índice 0, el segundo tiene índice 1, y así sucesivamente. En este ejemplo, accedemos al primer y al tercer carácter de una cadena de texto.\n\nmy_str = \"TESTING\"\nprimero = my_str[0]   # Primer carácter: 'T'\ntercero = my_str[2]   # Tercer carácter: 'S'\n\nprint(primero, tercero)\n\nT S",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "02_introduccion_python.html#estructuras-de-control-en-python",
    "href": "02_introduccion_python.html#estructuras-de-control-en-python",
    "title": "Python 101",
    "section": "Estructuras de Control en Python",
    "text": "Estructuras de Control en Python\nLas estructuras de control en Python permiten dirigir el flujo de ejecución del programa, tomando decisiones o repitiendo acciones. Son esenciales para que el código pueda adaptarse a diferentes situaciones, condiciones o conjuntos de datos.\n\nCondicionales (if, elif, else)\nLas declaraciones condicionales se usan para tomar decisiones. Permiten que el programa ejecute diferentes bloques de código dependiendo de si ciertas condiciones se cumplen o no.\n\nx = 10\n\nif x &gt; 5:\n    print(\"x es mayor que 5\")\nelif x == 5:\n    print(\"x es igual a 5\")\nelse:\n    print(\"x es menor que 5\")\n\nx es mayor que 5\n\n\nEn este ejemplo:\n\nSe evalúa si x es mayor que 5.\nSi no lo es, se verifica si es igual a 5.\nSi ninguna de las anteriores se cumple, se ejecuta el bloque else.\n\n\n\nBucles (for, while)\nLos bucles permiten repetir un bloque de código múltiples veces, ya sea recorriendo una secuencia (como una lista) o mientras se cumpla una condición.\n\n\nBucle for – Iterar sobre una secuencia\nEl bucle for se utiliza para recorrer elementos de una secuencia (lista, tupla, cadena de texto, etc.).\n\nfrutas = [\"manzana\", \"banana\", \"cereza\"]\nfor fruta in frutas:\n    print(fruta)\n\nmanzana\nbanana\ncereza\n\n\nSe imprime cada fruta de la lista una por una.\n\n\nBucle while – Repetir mientras una condición sea verdadera\nEl bucle while ejecuta el bloque de código mientras la condición se mantenga verdadera.\n\ncontador = 0\nwhile contador &lt; 5:\n    print(\"Contador: \", contador)\n    contador += 1\n\nContador:  0\nContador:  1\nContador:  2\nContador:  3\nContador:  4\n\n\nEste bucle imprime los números del 0 al 4. La variable contador se incrementa en cada vuelta hasta que deja de cumplir la condición.\n\n\nDeclaraciones de control de bucles (break, continue, pass)\nEstas instrucciones especiales permiten modificar el comportamiento del bucle:\n\nbreak: Detiene completamente la ejecución del bucle.\ncontinue: Salta la iteración actual y pasa a la siguiente.\npass: No hace nada; se usa como marcador de posición cuando se necesita un bloque pero no queremos ejecutar código aún.\n\n\nfor numero in range(10):\n    if numero == 5:\n        break  # Sale del bucle cuando número es 5\n    if numero == 3:\n        continue  # Salta la iteración cuando número es 3\n    print(numero)\n\n0\n1\n2\n4\n\n\nResultado: Imprime los números del 0 al 4, pero salta el 3 y se detiene al llegar al 5.\n\n\nEstructura de Control de Excepciones (try, except, else)\ntry: Intenta ejecutar un bloque de código que podría generar un error.\nexcept: Se ejecuta si ocurre un error dentro del bloque try.\nelse: Se ejecuta solo si no ocurre ningún error en el bloque try.\nEjemplo con try, except, else:\n\nvalores = [\"10\", \"abc\", \"25\", \"3.14\", \"-7\"]\n\nfor valor in valores:\n    try:\n        numero = int(valor)\n    except ValueError:\n        print(f\"No se pudo convertir '{valor}' a número entero.\")\n    else:\n        print(f\"Conversión exitosa: {numero}\")\n\nConversión exitosa: 10\nNo se pudo convertir 'abc' a número entero.\nConversión exitosa: 25\nNo se pudo convertir '3.14' a número entero.\nConversión exitosa: -7\n\n\n\n\nComprensión de listas (List Comprehensions)\nUna forma concisa y elegante de crear listas en una sola línea de código, aplicando condiciones o transformaciones.\n\nnumeros = [x for x in range(10) if x % 2 == 0]\nprint(numeros)  # [0, 2, 4, 6, 8]\n\n[0, 2, 4, 6, 8]\n\n\nEste ejemplo crea una lista con los números pares del 0 al 9.\nEstas estructuras de control son fundamentales para escribir programas que sean dinámicos, eficientes y fáciles de entender. Aprender a usarlas correctamente es un paso clave en el camino de dominar Python.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html",
    "href": "04_introduccion_pymarc2.html",
    "title": "Búsqueda con PyMARC",
    "section": "",
    "text": "Sample Data: edited_69x_subject.mrc\nEnlace al google colab (python Basics, PyMarc Basics)\nVamos a seguir explorando cómo realizar búsquedas.",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html#busqueda-general",
    "href": "04_introduccion_pymarc2.html#busqueda-general",
    "title": "Búsqueda con PyMARC",
    "section": "Busqueda General",
    "text": "Busqueda General\n¿Qué pasa si queremos encontrar cualquier registro que contenga un termino en particular?\nSugerencias: * California * San Francisco * lesbian\n\n# Importamos la biblioteca pymarc, que nos ayuda a leer archivos MARC\nimport pymarc\n\ntermino_de_busqueda = \"California\"\n\n# Definimos el nombre del archivo MARC que vamos a leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo binario ('rb' significa 'read binary')\nwith open(my_marc_file, 'rb') as data:\n    \n    # Creamos un lector de registros MARC a partir del archivo abierto\n    reader = pymarc.MARCReader(data)\n    \n    # Recorremos cada registro en el archivo MARC\n    for record in reader:\n        if termino_de_busqueda in str(record):\n            print(record)\n            # Detener después del primer registro con \"New Zealand\"\n            break\n\n=LDR  08224cpcaa22009377a 4500\n=001  13109011\n=005  20221206230121.0\n=006  knnn\\\\\\\\\\\\\\\\\\\\\\\\kn\n=006  innn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n=006  m\\\\\\\\\\\\\\\\d\\\\\\\\\\\\\\\\\n=006  rnnn\\\\\\\\\\\\\\\\\\\\\\\\rn\n=008  170406i19632005ctu\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\eng\\d\n=035  \\\\$9(YUL)ead.beinecke.oleary\n=035  \\\\$a13109011\n=040  \\\\$aCtY-BR$beng$cCtY-BR$edacs\n=043  \\\\$an-us---$an-us-ca\n=100  1\\$aO'Leary, Jean.\n=245  10$aJean O'Leary papers,$f1963-2005.\n=300  \\\\$a18.35$flinear feet (20 boxes)\n=351  \\\\$aOrganized into five series: I. Professional Papers, 1973-2005. II. Correspondence, 1976-2004. III. Personal Papers, 1963-2005. IV. Photographs, circa 1970-2005. V. Computer and Audiovisual Media, circa 1990-1994.\n=506  0\\$aThis material is open for research.\n=506  1\\$3Box 19 (computer media): Restricted Fragile Material. Reference copies of electronic files may be requested. Consult Access Services for further information.\n=506  1\\$3Box 20 (audiovisual material): Restricted fragile material. Reference copies may be requested. Consult Access Services for further information.\n=545  \\\\$aJean O'Leary was a former Roman Catholic nun who left her convent in 1971 to join the gay rights movement in New York City. O'Leary was a member of the Gay Activists Alliance until 1972 when she broke away from the group and formed Lesbian Feminist Liberation. She was co-executive director of the National Gay and Lesbian Task Force from 1976 to 1979 and subsequently became executive director of National Gay Rights Advocates. In 1977 O'Leary and Midge Costanza, her then-partner and special assistant to President Jimmy Carter, organized the first meeting of gay rights activists at the White House. O'Leary was also a speaker at the 1977 National Women's Conference. In 1988, she co-founded National Coming Out Day. O'Leary was active in Democratic Party politics and chaired the Democratic National Committee's Gay and Lesbian Caucus from 1992 to 2002; her marketing company, O'Leary & Associates, worked on political campaigns in California for Barbara Boxer, Ron Brown, and Dianne Feinstein. She and her partner, Lisa Phelps, had a daughter, Victoria, and a son David de Maria.\n=520  \\\\$aThe collection consists of professional papers, correspondence, personal papers, photographs, and computer and audiovisual media by or relating to gay rights activist and former Catholic nun Jean O'Leary. Professional papers document her work as executive director of National Gay Rights Advocates, including a lawsuit against the National Institutes of Health and Food and Drug Administration over approval times for AIDS drugs. Also present are materials related to the National Gay and Lesbian Task Force, National Coming Out Day, Gay Activists Alliance, Access Now for Gay and Lesbian Equality, and the Democratic National Committee, and O'Leary's writings and speeches concerning advocacy and legal rights of gays and lesbians. Among the correspondents are Barbara Boxer, Ron Brown, Bill Clinton, Midge Costanza, Michael Dukakis, Dianne Feinstein, Ed Koch, Kate Millett, David B. Mixner, Sean Strub, Bruce Voeller, Sarah Weddington, Kay Whitlock, and Molly Yard. Personal papers contain awards, school papers, yearbooks, clippings, and interviews, in addition to pinback buttons, t-shirts, and other memorabilia commemorating gay rights milestones and political campaigns. Photographs feature O’Leary, Bella Abzug, Virginia Apuzzo, Tammy Baldwin, Costanza, Martin Duberman, Florynce Kennedy, Gloria Steinem, and Voeller, and events such as the Lesbian Feminist Liberation \"Lavender Dinosaur Demonstration\" in New York, Equal Rights Amendment march on Washington D.C., and the Democratic National Convention. Computer and audiovisual media chiefly relate to political campaigns.\n=555  \\\\$aFinding aid available.\n=561  \\\\$aPurchased from Glenn Horowitz Bookseller, Inc., on the Edwin J. Beinecke Book Fund Fund, 2017.\n=546  \\\\$aIn English.\n=524  \\\\$aJean O'Leary Papers. General Collection, Beinecke Rare Book and Manuscript Library, Yale University.\n=600  10$aApuzzo, Virginia,$d1941-\n=600  10$aBaldwin, Tammy,$d1962-$0http://id.loc.gov/authorities/names/no2012147673\n=600  10$aBoxer, Barbara.$0http://id.loc.gov/authorities/names/n93084010\n=600  10$aBrown, Ronald Harmon,$d1941-2006.$0http://id.loc.gov/authorities/names/no93026751\n=600  10$aClinton, Bill,$d1946-$0http://id.loc.gov/authorities/names/n82029644\n=600  10$aCostanza, Midge,$d1932-2010.$0http://id.loc.gov/authorities/names/n2015063966\n=600  10$aDuberman, Martin B.,$d1930-$0http://id.loc.gov/authorities/names/n50023840\n=600  10$aDukakis, Michael S.$q(Michael Stanley),$d1933-$0http://id.loc.gov/authorities/names/n80011660\n=600  10$aFeinstein, Dianne,$d1933-$0http://id.loc.gov/authorities/names/n91064892\n=600  10$aKennedy, Florynce,$d1916-2000.$0http://id.loc.gov/authorities/names/n82039729\n=600  10$aKoch, Ed,$d1924-2013.$0http://id.loc.gov/authorities/names/n81051888\n=600  10$aMillett, Kate.$0http://id.loc.gov/authorities/names/n79018615\n=600  10$aMixner, David B.$0http://id.loc.gov/authorities/names/n91019032\n=600  10$aO'Leary, Jean.\n=600  10$aSteinem, Gloria.$0http://id.loc.gov/authorities/names/n83074143\n=600  10$aStrub, Sean O'Brien.$0http://id.loc.gov/authorities/names/n85377205\n=600  10$aVoeller, Bruce R.$0http://id.loc.gov/authorities/names/n88037673\n=600  10$aWeddington, Sarah Ragle.$0http://id.loc.gov/authorities/names/n87151192\n=600  10$aWhitlock, Kay.$0http://id.loc.gov/authorities/names/no2005085173\n=600  10$aYard, Molly,$d1912-2005.$0http://id.loc.gov/authorities/names/no2016120397\n=610  20$aAccess Now for Gay and Lesbian Equality.\n=610  20$aComing Out Project (Human Rights Campaign)$0http://id.loc.gov/authorities/names/no2009013771\n=610  20$aDemocratic National Committee (U.S.)$0http://id.loc.gov/authorities/names/n81133513\n=610  20$aDemocratic Party (U.S.)$0http://id.loc.gov/authorities/names/n79054058\n=610  20$aGay Activists Alliance.$0http://id.loc.gov/authorities/names/n93060721\n=610  20$aLesbian Feminist Liberation.$0http://id.loc.gov/authorities/names/nr93017195\n=610  20$aNational Gay and Lesbian Task Force (U.S.)$0http://id.loc.gov/authorities/names/n85274932\n=610  20$aNational Gay Rights Advocates (U.S.)$0http://id.loc.gov/authorities/names/n88121201\n=650  \\0$aAIDS activists$zUnited States.\n=650  \\0$aEqual rights amendments.$0http://id.loc.gov/authorities/subjects/sh85044501\n=650  \\0$aGay liberation movement$zUnited States.$0http://id.loc.gov/authorities/subjects/sh93005114\n=650  \\0$aGay rights$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2008105072\n=650  \\0$aLesbian activists$zUnited States.\n=650  \\0$aLesbian feminism.$0http://id.loc.gov/authorities/subjects/sh93000705\n=650  \\0$aLesbian nuns.$0http://id.loc.gov/authorities/subjects/sh85076156\n=650  \\0$aLesbians$xLegal status, laws, etc.$zUnited States.\n=650  \\0$aLesbians' writings.$0http://id.loc.gov/authorities/subjects/sh86002214\n=650  \\0$aPolitical activists$zUnited States.$0http://id.loc.gov/authorities/subjects/sh98001482\n=650  \\0$aPolitical campaigns$zUnited States.$0http://id.loc.gov/authorities/subjects/sh2008109540\n=650  \\0$aPolitical parties$zCalifornia.\n=650  \\0$aProtest movements$zUnited States$y20th century.\n=650  \\0$aSexual minorities.$0http://id.loc.gov/authorities/subjects/sh2004003385\n=650  \\0$aWomen$xPolitical activity.$0http://id.loc.gov/authorities/subjects/sh85147597\n=655  \\7$aAudiovisual materials.$2aat\n=655  \\7$aBorn digital.$2aat\n=655  \\7$aButtons (information artifacts)$2aat\n=655  \\7$aPhotographs.$2aat\n=655  \\7$aSweat shirts.$2aat\n=655  \\7$aT-shirts.$2aat\n=852  \\\\$aBeinecke Rare Book and Manuscript Library, Yale University, New Haven, CT\n=856  42$3View a description and listing of collection contents in the finding aid$uhttp://hdl.handle.net/10079/fa/beinecke.oleary\n=690  04$aLGBTQ resource.",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html#búsqueda-de-campos-específicos-con-pymarc",
    "href": "04_introduccion_pymarc2.html#búsqueda-de-campos-específicos-con-pymarc",
    "title": "Búsqueda con PyMARC",
    "section": "Búsqueda de campos específicos con PyMARC",
    "text": "Búsqueda de campos específicos con PyMARC\nLa busqueda anterior imprime todos los campos the un registro.Esto podría devolver una gran cantidad de datos de poco interes para nosotors. Pensemos en cómo podríamos formular mejor esta pregunta para refinar los resultados.\nSi en lugar de imprimir todo el registro, queremos ver sólo los campos MARC que contienen el patrón de interes, podemos añadir otro bucle.\nAdemás, podríamos querer mostrar el identificador del registro junto con el campo coincidente:\n\n# Importamos la biblioteca pymarc, que nos ayuda a leer archivos MARC\nimport pymarc\n\ntermino_de_busqueda = \"California\"\n\n# Definimos el nombre del archivo MARC que vamos a leer\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo en modo binario ('rb' significa 'read binary')\nwith open(my_marc_file, 'rb') as data:\n    \n    # Creamos un lector de registros MARC a partir del archivo abierto\n    reader = pymarc.MARCReader(data)\n\n    # Recorremos cada registro en el archivo MARC\n    for record in reader:\n        if termino_de_busqueda in str(record):\n            # Iterar por cada campo del registro\n            for field in record:\n                if termino_de_busqueda in field.value():\n                    # Si encontramos el patron devolvemos el BIB_ID y el campo\n                    print(record['001'].value(), field)\n\n13109011 =545  \\\\$aJean O'Leary was a former Roman Catholic nun who left her convent in 1971 to join the gay rights movement in New York City. O'Leary was a member of the Gay Activists Alliance until 1972 when she broke away from the group and formed Lesbian Feminist Liberation. She was co-executive director of the National Gay and Lesbian Task Force from 1976 to 1979 and subsequently became executive director of National Gay Rights Advocates. In 1977 O'Leary and Midge Costanza, her then-partner and special assistant to President Jimmy Carter, organized the first meeting of gay rights activists at the White House. O'Leary was also a speaker at the 1977 National Women's Conference. In 1988, she co-founded National Coming Out Day. O'Leary was active in Democratic Party politics and chaired the Democratic National Committee's Gay and Lesbian Caucus from 1992 to 2002; her marketing company, O'Leary & Associates, worked on political campaigns in California for Barbara Boxer, Ron Brown, and Dianne Feinstein. She and her partner, Lisa Phelps, had a daughter, Victoria, and a son David de Maria.\n13109011 =650  \\0$aPolitical parties$zCalifornia.\n16265055 =545  \\\\$aEileen Myles is an American writer, educator, and performance artist who has published over twenty books of poetry, fiction, and nonfiction, including the autobiographical novel Chelsea Girls (1994). They were born on December 9, 1949 in Cambridge, Massachusetts, and graduated from the University of Massachusetts at Boston in 1971 with a B.A. in English. After moving to New York City in 1974, they studied in workshops at St. Mark’s Poetry Project with Ted Berrigan, Alice Notley, and Paul Violi. They later served as the organization’s artistic director from 1984 to 1986. Myles is the author of books of poetry such as I Must Be Living Twice: New and Selected Poems 1974-2014 (2015) and Evolution (2018), the novel Cool for You (2000), and Afterglow (a dog memoir) (2017). Their poetry, essays, and articles have been featured in numerous anthologies and publications such as Harper’s Magazine, The New Yorker, and The Village Voice. They additionally have appeared in film and television, and created performance pieces including The Collection of Silence for the Dia Center for the Arts in New York in 2010. Myles has taught writing and literature at Columbia University, New York University, University of California, San Diego, Bard College, and other institutions. Their awards include the American Academy of Arts and Letters Award, the Poetry Society of America Shelly Award, and four Lambda Book Awards. Myles has also received fellowships and grants from the Guggenheim Foundation, the National Endowment for the Arts, the MacDowell Colony, and Creative Capital. Myles lives in New York City and Marfa, Texas. They use they/them pronouns.\n16764331 =650  \\0$aSmall presses$zCalifornia.\n17213320 =545  \\\\$aDorothy Gray (born October 23, 1922), actress, talent manager, and assistant to Katherine Dunham, grew up in Los Angeles, CA. The niece of Charlie Chaplin, Gray became a child actress at a very young age, appearing in films as early as 1924. She was later cast in a number of Hollywood productions, including uncredited roles in Symphony of Six Million (1932), Men in White (1934), and Rose-Marie (1936). In the 1940s she started working with jazz musicians and stage performers in Hollywood as an assistant and manager. When Gray was nineteen, she met Katherine Dunham at the Paramount Theater in Los Angeles. The two formed a close bond that was “romantic, sisterly, and maternal” (Das 2017). Dorothy Gray managed Katherine Dunham’s business and bookings in the United States until her death in 1976. From the 1950s onward Gray was in two long term romantic relationships with two women, Ann Hathaway and Kellie Greene. Dorothy Gray died May 9, 1976, in Los Angeles, California.\n17213320 =520  \\\\$aThe Dorothy Gray papers span the years 1890-1994 and consist of correspondence, photographic prints and negatives, photograph albums, musical scores, clippings, appointment books, and files related to her life in Hollywood and her career as a talent manager, including scrapbooks following the careers of friends and associates. The collection also documents her family and childhood. A bulk of the collection material relates to her relationships with her social circle in California during the years 1951-1968. Included are love letters Gray exchanged with pianist Kellie Greene and jazz singer Ann Hathaway as well as photographs of their travels, family, and pets.\n9742319 =650  \\0$aTheater programs$zCalifornia$zSan Francisco.\n9742319 =651  \\7$aCalifornia$zSan Francisco.$2fast$0(OCoLC)fst01204481\n9742319 =655  \\7$aTheater programs$zCalifornia$zSan Francisco.$2rbgenr\n9742360 =650  \\0$aGay theater$zCalifornia$zSan Francisco.\n9742360 =650  \\0$aTheater$zCalifornia$zSan Francisco.\n9742360 =650  \\0$aPerforming arts$xTicket subscription$zCalifornia$zSan Francisco.\n13628698 =752  \\\\$aUnited States$bCalifornia$dSan Francisco.\n14059505 =752  \\\\$aUnited States$bCalifornia$dRohnert Park.\n16687567 =752  \\\\$aUnited States$bCalifornia$dLos Angeles.\n16786288 =264  \\0$a[California?],$c[2009-2010?]\n16786288 =650  \\0$aBisexuals$zCalifornia$zSan Francisco$vPictorial works.\n16786288 =650  \\0$aGay men$zCalifornia$zSan Francisco$vPictorial works.\n16786288 =650  \\0$aIntersex people$zCalifornia$zSan Francisco$vPictorial works.\n16786288 =650  \\0$aLesbians$zCalifornia$zSan Francisco$vPictorial works.\n16786288 =650  \\0$aTransgender people$zCalifornia$zSan Francisco$vPictorial works.\n16786288 =752  \\\\$aUnited States$bCalifornia.",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html#subcampos-y-bucles-anidados",
    "href": "04_introduccion_pymarc2.html#subcampos-y-bucles-anidados",
    "title": "Búsqueda con PyMARC",
    "section": "Subcampos y bucles anidados",
    "text": "Subcampos y bucles anidados\nPodemos aplicar el mismo enfoque con bucles para acceder a los subcampos de cualquier campo que los tenga:\nfor record in reader:\n    for field in record:\n        print(field)\n        for subfield in field:\n            print(subfield)",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html#métodos-especiales-de-pymarc",
    "href": "04_introduccion_pymarc2.html#métodos-especiales-de-pymarc",
    "title": "Búsqueda con PyMARC",
    "section": "Métodos especiales de PyMARC",
    "text": "Métodos especiales de PyMARC\nPyMARC ofrece varios métodos abreviados para acceder a campos y subcampos de forma elegante.\n\nget_fields(), get_subfields()\n\nimport pymarc\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\nwith open(my_marc_file, 'rb') as data:\n    reader = pymarc.MARCReader(data)\n\n    for record in reader:\n        if \"California\" in str(record):\n            print(record.leader)\n            my_245s = record.get_fields('245')\n            for my_245 in my_245s:\n                subfields = my_245.get_subfields('a', 'b', 'c', 'f', 'g', 'h', 'k', 'n', 'p', 's', '6', '8')\n                for sub in subfields:\n                    print(\"  \",sub)\n                # Detener después del primer campo 245 del registro\n                break\n\n08224cpcaa22009377a 4500\n   Jean O'Leary papers,\n   1963-2005.\n09802cpcaa2201129 i 4500\n   Eileen Myles papers,\n   1958-2017.\n07228cpcaa2200733 i 4500\n   Paul Mariah papers,\n   1898-2014\n   (bulk 1960-1988).\n03252cpcaa2200361 i 4500\n   Dorothy Gray papers,\n   1890-1994\n01861cam a2200337Mi 4500\n   \"George Washington slept here\" /\n   by George S. Kaufman & Moss Hart ; directed by Donald McLean ; produced by Perry George & Rod Schaefer.\n01069cam a2200277Mi 4500\n   Theatre Rhinoceros presents the 1984-85 season of High drama :\n   our 8th season.\n01967cam a2200457 a 4500\n   Mama's boy /\n   Bev Arthur and Martin Arthur.\n02024cam a2200421 a 4500\n   Witness :\n   the artist's vision in The face of AIDS /\n   Jackie Kirk, Barbara Swift Brauer.\n03049cam a2200529 i 4500\n   The men with the pink triangle :\n   the true, life-and-death story of homosexuals in the Nazi death camps /\n   by Heinz Heger ; translated by David Fernbach.\n02208cam a2200337 i 4500\n   Snap/shot :\n   99 years of looking fabulous.\n\n\nPara obtener esta lista de subcampos consultamos:\nhttps://www.loc.gov/marc/bibliographic/concise/bd245.html\n\n\nAcceder a indicadores de un campo, .indicator1 , .indicator2\n\nimport pymarc\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Imprimir mas de un registro\ncount=0\nmax = 5\nwith open(my_marc_file, 'rb') as data:\n    reader = pymarc.MARCReader(data)\n    \n    for record in reader:\n        print(record['245'])\n        print(\"Indicador 1 del campo 245:\", record['245'].indicator1)\n        print(\"Indicador 2 del campo 245:\", record['245'].indicator2)\n        count+=1\n        # Romper el ciclo al llegar al maximo\n        if count &gt;= max:\n            break\n\n=245  10$aFamily Equality Council records,$f1977-2014 (inclusive).\nIndicador 1 del campo 245: 1\nIndicador 2 del campo 245: 0\n=245  10$aRainbow Families records,$f1983-2011 (inclusive).\nIndicador 1 del campo 245: 1\nIndicador 2 del campo 245: 0\n=245  10$aJean O'Leary papers,$f1963-2005.\nIndicador 1 del campo 245: 1\nIndicador 2 del campo 245: 0\n=245  10$aFreedom to Marry records,$f1948-2016 (inclusive).\nIndicador 1 del campo 245: 1\nIndicador 2 del campo 245: 0\n=245  10$aMichael Antisdale and Mark R. Melanson Papers,$f1995-2003 (inclusive).\nIndicador 1 del campo 245: 1\nIndicador 2 del campo 245: 0\n\n\nPodemos usar los indicadores como filtro:\nfor record in reader:\n    if record['245'].indicator2 != '0':\n        print(record['245'])\n        print()",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html#otros-métodos-del-objeto-record",
    "href": "04_introduccion_pymarc2.html#otros-métodos-del-objeto-record",
    "title": "Búsqueda con PyMARC",
    "section": "Otros métodos del objeto record",
    "text": "Otros métodos del objeto record\nPyMARC ofrece accesos directos a datos comunes:\nrecord.author()\nrecord.isbn()\nrecord.issn()\nrecord.issn_title()\nrecord.leader\nrecord.location()\nrecord.pos\nrecord.publisher()\nrecord.pubyear()\nrecord.series()\nrecord.sudoc()\nrecord.title()\nrecord.uniformtitle()\nrecord.notes()\nrecord.subjects()\nrecord.physicaldescription()\nPuedes probar:\nfor record in reader:\n    print(record)\n    print(record.author())\n    print(record.isbn())\n    print(record.issn())\n    quit()",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html#construyendo-un-parser-básico",
    "href": "04_introduccion_pymarc2.html#construyendo-un-parser-básico",
    "title": "Búsqueda con PyMARC",
    "section": "Construyendo un parser básico",
    "text": "Construyendo un parser básico\n\nfrom pymarc import MARCReader\n\narchivo = \"data/edited_69x_subject.mrc\"\n\n# Abrimos el archivo MARC\nwith open(archivo, \"rb\") as data:\n    reader = MARCReader(data)\n\n    # Iteramos sobre los registros\n    for record in reader:\n        # Mostramos el ID del registro (campo 001)\n        if record['001']:\n            print(\"ID:\", record['001'].value())\n        else:\n            print(\"ID: (no disponible)\")\n\n        # Recorremos todos los campos del registro\n        for my_field in record:\n            # Intentamos acceder a los indicadores (solo existen en campos con subcampos)\n            try:\n                ind_1 = my_field.indicator1 or \"/\"  # \"/\" si el indicador no está definido\n                ind_2 = my_field.indicator2 or \"/\"\n                print(f\"\\tTag #: {my_field.tag}  Indicador 1: {ind_1}  Indicador 2: {ind_2}\")\n            except AttributeError:\n                # Si el campo no tiene indicadores (como los de control), solo mostramos el tag\n                print(f\"\\tTag #: {my_field.tag} (no posee indicadores)\")\n\n            # Recorremos los subcampos (si existen)\n            if hasattr(my_field, '__iter__'):\n                for key, value in my_field:\n                    print(f\"\\t\\tSubcampo ${key}: {value}\")\n\n        print(\"\\n\" + \"-\" * 50 + \"\\n\")\n\n        # Solo mostramos un registro como ejemplo\n        break\n\nID: 12251425\n    Tag #: 001 (no posee indicadores)\n    Tag #: 005 (no posee indicadores)\n    Tag #: 008 (no posee indicadores)\n    Tag #: 035  Indicador 1:    Indicador 2:  \n        Subcampo $9: (YUL)ead.mssa.ms.2000\n    Tag #: 035  Indicador 1:    Indicador 2:  \n        Subcampo $a: 12251425\n    Tag #: 040  Indicador 1:    Indicador 2:  \n        Subcampo $a: CtY\n        Subcampo $b: eng\n        Subcampo $c: CtY\n        Subcampo $e: dacs\n    Tag #: 079  Indicador 1:    Indicador 2:  \n        Subcampo $a: (OCoLC)1007214876\n    Tag #: 090  Indicador 1:    Indicador 2:  \n        Subcampo $a: MS 2000\n    Tag #: 110  Indicador 1: 2  Indicador 2:  \n        Subcampo $a: Family Equality Council.\n        Subcampo $0: http://id.loc.gov/authorities/names/no2012037822\n    Tag #: 245  Indicador 1: 1  Indicador 2: 0\n        Subcampo $a: Family Equality Council records,\n        Subcampo $f: 1977-2014 (inclusive).\n    Tag #: 300  Indicador 1:    Indicador 2:  \n        Subcampo $a: 11 linear feet. (23 boxes)\n    Tag #: 351  Indicador 1:    Indicador 2:  \n        Subcampo $a: The materials are arranged according to document type.\n    Tag #: 506  Indicador 1:    Indicador 2:  \n        Subcampo $a: The materials are open for research with the exception of the  electronic files, which are closed until processed.\n    Tag #: 520  Indicador 1:    Indicador 2:  \n        Subcampo $a: This collection consists of the records of Family Equality Council, a national advocacy organization for esbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Materials in the collection consist of correspondence, annual and quarterly reports, articles and clippings, board of directors records, event records, financial and fundraising records, publications, subject files, and electronic files. The collection is particularly strong both for its documentation of the group's activism and advocacy efforts, as well as its efforts to provide community for and document the everyday lives and experiences of LGBTQ families.\n    Tag #: 524  Indicador 1:    Indicador 2:  \n        Subcampo $a: Family Equality Council Records (MS 2000).  Manuscripts and Archives, Yale University Library.\n    Tag #: 540  Indicador 1:    Indicador 2:  \n        Subcampo $a: Copyright is retained by the creator(s) of this collection for materials they have authored or otherwise produced. After the lifetime of the creator(s) or until January 1, 2039 (date), whichever comes first, copyright passes to Yale University whether such works are at Yale or physically located elsewhere in the world. Copyright status for other collection materials is unknown. Additional information is provided in the finding aid.\n    Tag #: 544  Indicador 1:    Indicador 2:  \n        Subcampo $a: Related material: Rainbow Families records (MS 2006).\n    Tag #: 545  Indicador 1:    Indicador 2:  \n        Subcampo $a: Family Equality Council is a national advocacy organization dedicated to securing equal rights for lesbian, gay, bisexual, transgender, and queer (LGBTQ) parents, guardians, and allies. Family Equality Council has its origins in the Gay Fathers Coalition, an organization founded in 1979. In 1986, the Gay Fathers Coalition expanded to include lesbian mothers, prompting the group to rename itself the Gay and Lesbian Parents Coalition International (GLPCI). In 1998, GLPCI changed its name to the Family Pride Coalition in order to include bisexual and transgender parents among its members and constituents. In that same year, a group of youth who had been involved with Family Pride Coalition established a separate advocacy organization for the children of LGBTQ parents, Children of Lesbians and Gays Everywhere (COLAGE). In 2007, the Family Pride Coalition merged with Rainbow Families, and in that same year renamed itself again as Family Equality Council. Later, the group dropped Council from its name, becoming Family Equality in 2018.\n    Tag #: 546  Indicador 1:    Indicador 2:  \n        Subcampo $a: The materials are in English.\n    Tag #: 555  Indicador 1:    Indicador 2:  \n        Subcampo $a: The finding aid is available in the repository and on the Internet.\n    Tag #: 561  Indicador 1:    Indicador 2:  \n        Subcampo $a: The materials were the gift of Family Equality Council, 2014.\n    Tag #: 610  Indicador 1: 2  Indicador 2: 0\n        Subcampo $a: COLAGE.\n        Subcampo $0: http://id.loc.gov/authorities/names/no2008088417\n    Tag #: 610  Indicador 1: 2  Indicador 2: 0\n        Subcampo $a: Family Equality Council.\n        Subcampo $0: http://id.loc.gov/authorities/names/no2012037822\n    Tag #: 610  Indicador 1: 2  Indicador 2: 0\n        Subcampo $a: Family Pride Coalition.\n    Tag #: 610  Indicador 1: 2  Indicador 2: 0\n        Subcampo $a: Gay and Lesbian Parents Coalition International.\n        Subcampo $0: http://id.loc.gov/authorities/names/nr2002025214\n    Tag #: 610  Indicador 1: 2  Indicador 2: 0\n        Subcampo $a: Gay Fathers Coalition.\n    Tag #: 610  Indicador 1: 2  Indicador 2: 0\n        Subcampo $a: Rainbow Families.\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Adoptive parents.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh92003241\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Bisexuals\n        Subcampo $z: United States.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh98006061\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Families\n        Subcampo $z: United States.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh85047032\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Gay fathers.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh90000760\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Gay men\n        Subcampo $x: Legal status, laws, etc.\n        Subcampo $z: United States.\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Gay parents.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh85061779\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Gay rights\n        Subcampo $z: United States.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh2008105072\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Lesbian mothers.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh85076155\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Transgender people\n        Subcampo $z: United States.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh2012000715\n    Tag #: 650  Indicador 1:    Indicador 2: 0\n        Subcampo $a: Transsexuals\n        Subcampo $z: United States.\n        Subcampo $0: http://id.loc.gov/authorities/subjects/sh2003008858\n    Tag #: 852  Indicador 1:    Indicador 2:  \n        Subcampo $a: Manuscripts and Archives,\n        Subcampo $b: Yale University Library,\n        Subcampo $e: P.O. Box 208240, New Haven, CT  06520-8240.\n    Tag #: 856  Indicador 1: 4  Indicador 2: 2\n        Subcampo $3: View a description and listing of collection contents in the finding aid\n        Subcampo $u: http://hdl.handle.net/10079/fa/mssa.ms.2000\n    Tag #: 690  Indicador 1: 0  Indicador 2: 4\n        Subcampo $a: LGBTQ resource.\n\n--------------------------------------------------\n\n\n\n¿Qué hace este código?\nEsta tabla resume el propósito de cada parte del código:\n\n\n\n\n\n\n\nParte del código\n¿Qué hace?\n\n\n\n\nrecord['001'].value()\nMuestra el ID del registro (campo 001)\n\n\nfor my_field in record:\nRecorre todos los campos del registro\n\n\nmy_field.tag\nMuestra el número de campo (por ejemplo, 245, 100, etc.)\n\n\nmy_field.indicator1 / indicator2\nMuestra los indicadores (si existen)\n\n\nfor key, value in my_field:\nRecorre los subcampos (como $a, $b, etc.)\n\n\nhasattr(my_field, '__iter__')\nVerifica si el campo tiene subcampos (evita error en campos de control como 001 o 008)\n\n\n\n\nNotas importantes\n\nLos campos de control como 001, 005, 008 no tienen indicadores ni subcampos, por eso generan un AttributeError si se intenta acceder a indicator1 o indicator2.\nUsamos or \"/\" para mostrar un valor por defecto cuando un indicador no está presente (vacío).\nSolo se muestra un registro con break para evitar imprimir todo el archivo MARC durante pruebas o demostraciones.",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "04_introduccion_pymarc2.html#otros-ejemplos",
    "href": "04_introduccion_pymarc2.html#otros-ejemplos",
    "title": "Búsqueda con PyMARC",
    "section": "Otros ejemplos",
    "text": "Otros ejemplos\n(a) ¿Cuál es el ID 001 del registro con el identificador OCLC 39818086?\nfor record in reader:\n    for f in record.get_fields('035'):\n        if \"39818086\" in f.value():\n            print(record['001'].value())\n(b) ¿Cuántos registros tienen más de un campo 500?\nfor record in reader:\n    if len(record.get_fields('500')) &gt; 1:\n        print(record['001'].value())\n(c) ¿Cuántos registros describen un ítem con inglés como idioma principal?\nfor record in reader:\n    if \"eng\" in record['008'].value():\n        print(record['001'].value())",
    "crumbs": [
      "Búsqueda con PyMARC"
    ]
  },
  {
    "objectID": "06_introduccion_pymarc4.html",
    "href": "06_introduccion_pymarc4.html",
    "title": "Guardar archivos MARC",
    "section": "",
    "text": "Sample Data: edited_69x_subject.mrc\nEnlace al google colab (python Basics, PyMarc Basics)",
    "crumbs": [
      "Guardar archivos MARC"
    ]
  },
  {
    "objectID": "06_introduccion_pymarc4.html#guardar-archivos-marc-con-pymarc",
    "href": "06_introduccion_pymarc4.html#guardar-archivos-marc-con-pymarc",
    "title": "Guardar archivos MARC",
    "section": "Guardar archivos MARC con PyMARC",
    "text": "Guardar archivos MARC con PyMARC\nSolo nos queda una tarea por hacer: guardar nuestros registros MARC para poder reutilizarlos, compartirlos o cargarlos en otros sistemas.\nPyMARC incluye herramientas muy útiles que hacen este proceso rápido y sencillo.\n\nfrom pymarc import MARCReader\nfrom itertools import islice\n\nmy_marc_file = \"data/edited_69x_subject.mrc\"\n\n# Añadiremos registros a esta lista. Puede contener uno o más registros.\nmy_marc_records = []\n\ncount = 0\nsample_size = 5\nwith open(my_marc_file, 'rb') as data:\n    reader = MARCReader(data)\n    for record in reader:\n        # Añadimos cada registro a nuestra lista\n        my_marc_records.append(record)\n        # Imprimimos los IDs para visualizar qué estamos guardando\n        if count &lt; sample_size:\n            print(record['001'])\n        count +=1\n\n# Creamos un nuevo archivo para guardar los registros\nmy_new_marc_filename = \"my_new_marc_file.mrc\" \nwith open(my_new_marc_filename, 'wb') as data:\n    for my_record in my_marc_records:\n        # Escribimos cada registro en el archivo\n        data.write(my_record.as_marc())\n\nprint()\nprint(\"-----\")\nprint()\n\n# Abrimos el archivo guardado para verificar que todo se haya escrito correctamente\nwith open(my_new_marc_filename, 'rb') as data:\n    reader = MARCReader(data)\n    for record in islice(reader, sample_size):\n        print(record['001'])  # Mostramos los IDs para validar\n\n=001  12251425\n=001  12251731\n=001  13109011\n=001  13566297\n=001  14603009\n\n-----\n\n=001  12251425\n=001  12251731\n=001  13109011\n=001  13566297\n=001  14603009",
    "crumbs": [
      "Guardar archivos MARC"
    ]
  },
  {
    "objectID": "06_introduccion_pymarc4.html#versión-simplificada",
    "href": "06_introduccion_pymarc4.html#versión-simplificada",
    "title": "Guardar archivos MARC",
    "section": "Versión simplificada",
    "text": "Versión simplificada\nLa mayoría del código anterior es de apoyo para mostrar lo que ocurre. Si ya tienes una lista de registros llamada my_marc_records, guardar el archivo es muy sencillo:\n\nmy_new_marc_filename = \"my_new_marc_file.marc\"\nwith open(my_new_marc_filename, 'wb') as data:\n    for my_record in my_marc_records:\n        data.write(my_record.as_marc())",
    "crumbs": [
      "Guardar archivos MARC"
    ]
  },
  {
    "objectID": "06_introduccion_pymarc4.html#otras-opciones-de-salida",
    "href": "06_introduccion_pymarc4.html#otras-opciones-de-salida",
    "title": "Guardar archivos MARC",
    "section": "Otras opciones de salida",
    "text": "Otras opciones de salida\nNo estamos limitados al formato MARC binario. PyMARC también permite guardar los registros en otros formatos útiles:\n\ndata.write(my_record.as_dict())     # Diccionario Python\ndata.write(my_record.as_json())     # JSON\ndata.write(my_record.as_marc())     # MARC binario\ndata.write(my_record.as_marc21())   # Variante MARC21 legible por máquinas\nPuedes combinar esto con otras bibliotecas como json o csv si deseas exportar los datos a formatos más compatibles con hojas de cálculo o APIs web.",
    "crumbs": [
      "Guardar archivos MARC"
    ]
  }
]